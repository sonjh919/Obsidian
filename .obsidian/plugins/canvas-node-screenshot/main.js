/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ScreenshotNodePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// node_modules/html-to-image/es/util.js
function resolveUrl(url, baseUrl) {
  if (url.match(/^[a-z]+:\/\//i)) {
    return url;
  }
  if (url.match(/^\/\//)) {
    return window.location.protocol + url;
  }
  if (url.match(/^[a-z]+:/i)) {
    return url;
  }
  const doc = document.implementation.createHTMLDocument();
  const base = doc.createElement("base");
  const a = doc.createElement("a");
  doc.head.appendChild(base);
  doc.body.appendChild(a);
  if (baseUrl) {
    base.href = baseUrl;
  }
  a.href = url;
  return a.href;
}
var uuid = (() => {
  let counter = 0;
  const random = () => (
    // eslint-disable-next-line no-bitwise
    `0000${(Math.random() * 36 ** 4 << 0).toString(36)}`.slice(-4)
  );
  return () => {
    counter += 1;
    return `u${random()}${counter}`;
  };
})();
function toArray(arrayLike) {
  const arr = [];
  for (let i = 0, l = arrayLike.length; i < l; i++) {
    arr.push(arrayLike[i]);
  }
  return arr;
}
function px(node, styleProperty) {
  const win = node.ownerDocument.defaultView || window;
  const val = win.getComputedStyle(node).getPropertyValue(styleProperty);
  return val ? parseFloat(val.replace("px", "")) : 0;
}
function getNodeWidth(node) {
  const leftBorder = px(node, "border-left-width");
  const rightBorder = px(node, "border-right-width");
  return node.clientWidth + leftBorder + rightBorder;
}
function getNodeHeight(node) {
  const topBorder = px(node, "border-top-width");
  const bottomBorder = px(node, "border-bottom-width");
  return node.clientHeight + topBorder + bottomBorder;
}
function getImageSize(targetNode, options = {}) {
  const width = options.width || getNodeWidth(targetNode);
  const height = options.height || getNodeHeight(targetNode);
  return { width, height };
}
function getPixelRatio() {
  let ratio;
  let FINAL_PROCESS;
  try {
    FINAL_PROCESS = process;
  } catch (e) {
  }
  const val = FINAL_PROCESS && FINAL_PROCESS.env ? FINAL_PROCESS.env.devicePixelRatio : null;
  if (val) {
    ratio = parseInt(val, 10);
    if (Number.isNaN(ratio)) {
      ratio = 1;
    }
  }
  return ratio || window.devicePixelRatio || 1;
}
var canvasDimensionLimit = 16384;
function checkCanvasDimensions(canvas) {
  if (canvas.width > canvasDimensionLimit || canvas.height > canvasDimensionLimit) {
    if (canvas.width > canvasDimensionLimit && canvas.height > canvasDimensionLimit) {
      if (canvas.width > canvas.height) {
        canvas.height *= canvasDimensionLimit / canvas.width;
        canvas.width = canvasDimensionLimit;
      } else {
        canvas.width *= canvasDimensionLimit / canvas.height;
        canvas.height = canvasDimensionLimit;
      }
    } else if (canvas.width > canvasDimensionLimit) {
      canvas.height *= canvasDimensionLimit / canvas.width;
      canvas.width = canvasDimensionLimit;
    } else {
      canvas.width *= canvasDimensionLimit / canvas.height;
      canvas.height = canvasDimensionLimit;
    }
  }
}
function createImage(url) {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.decode = () => resolve(img);
    img.onload = () => resolve(img);
    img.onerror = reject;
    img.crossOrigin = "anonymous";
    img.decoding = "async";
    img.src = url;
  });
}
async function svgToDataURL(svg) {
  return Promise.resolve().then(() => new XMLSerializer().serializeToString(svg)).then(encodeURIComponent).then((html) => `data:image/svg+xml;charset=utf-8,${html}`);
}
async function nodeToDataURL(node, width, height) {
  const xmlns = "http://www.w3.org/2000/svg";
  const svg = document.createElementNS(xmlns, "svg");
  const foreignObject = document.createElementNS(xmlns, "foreignObject");
  svg.setAttribute("width", `${width}`);
  svg.setAttribute("height", `${height}`);
  svg.setAttribute("viewBox", `0 0 ${width} ${height}`);
  foreignObject.setAttribute("width", "100%");
  foreignObject.setAttribute("height", "100%");
  foreignObject.setAttribute("x", "0");
  foreignObject.setAttribute("y", "0");
  foreignObject.setAttribute("externalResourcesRequired", "true");
  svg.appendChild(foreignObject);
  foreignObject.appendChild(node);
  return svgToDataURL(svg);
}
var isInstanceOfElement = (node, instance) => {
  if (node instanceof instance)
    return true;
  const nodePrototype = Object.getPrototypeOf(node);
  if (nodePrototype === null)
    return false;
  return nodePrototype.constructor.name === instance.name || isInstanceOfElement(nodePrototype, instance);
};

// node_modules/html-to-image/es/clone-pseudos.js
function formatCSSText(style) {
  const content = style.getPropertyValue("content");
  return `${style.cssText} content: '${content.replace(/'|"/g, "")}';`;
}
function formatCSSProperties(style) {
  return toArray(style).map((name) => {
    const value = style.getPropertyValue(name);
    const priority = style.getPropertyPriority(name);
    return `${name}: ${value}${priority ? " !important" : ""};`;
  }).join(" ");
}
function getPseudoElementStyle(className, pseudo, style) {
  const selector = `.${className}:${pseudo}`;
  const cssText = style.cssText ? formatCSSText(style) : formatCSSProperties(style);
  return document.createTextNode(`${selector}{${cssText}}`);
}
function clonePseudoElement(nativeNode, clonedNode, pseudo) {
  const style = window.getComputedStyle(nativeNode, pseudo);
  const content = style.getPropertyValue("content");
  if (content === "" || content === "none") {
    return;
  }
  const className = uuid();
  try {
    clonedNode.className = `${clonedNode.className} ${className}`;
  } catch (err) {
    return;
  }
  const styleElement = document.createElement("style");
  styleElement.appendChild(getPseudoElementStyle(className, pseudo, style));
  clonedNode.appendChild(styleElement);
}
function clonePseudoElements(nativeNode, clonedNode) {
  clonePseudoElement(nativeNode, clonedNode, ":before");
  clonePseudoElement(nativeNode, clonedNode, ":after");
}

// node_modules/html-to-image/es/mimes.js
var WOFF = "application/font-woff";
var JPEG = "image/jpeg";
var mimes = {
  woff: WOFF,
  woff2: WOFF,
  ttf: "application/font-truetype",
  eot: "application/vnd.ms-fontobject",
  png: "image/png",
  jpg: JPEG,
  jpeg: JPEG,
  gif: "image/gif",
  tiff: "image/tiff",
  svg: "image/svg+xml",
  webp: "image/webp"
};
function getExtension(url) {
  const match = /\.([^./]*?)$/g.exec(url);
  return match ? match[1] : "";
}
function getMimeType(url) {
  const extension = getExtension(url).toLowerCase();
  return mimes[extension] || "";
}

// node_modules/html-to-image/es/dataurl.js
function getContentFromDataUrl(dataURL) {
  return dataURL.split(/,/)[1];
}
function isDataUrl(url) {
  return url.search(/^(data:)/) !== -1;
}
function makeDataUrl(content, mimeType) {
  return `data:${mimeType};base64,${content}`;
}
async function fetchAsDataURL(url, init, process2) {
  const res = await fetch(url, init);
  if (res.status === 404) {
    throw new Error(`Resource "${res.url}" not found`);
  }
  const blob = await res.blob();
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onerror = reject;
    reader.onloadend = () => {
      try {
        resolve(process2({ res, result: reader.result }));
      } catch (error) {
        reject(error);
      }
    };
    reader.readAsDataURL(blob);
  });
}
var cache = {};
function getCacheKey(url, contentType, includeQueryParams) {
  let key = url.replace(/\?.*/, "");
  if (includeQueryParams) {
    key = url;
  }
  if (/ttf|otf|eot|woff2?/i.test(key)) {
    key = key.replace(/.*\//, "");
  }
  return contentType ? `[${contentType}]${key}` : key;
}
async function resourceToDataURL(resourceUrl, contentType, options) {
  const cacheKey = getCacheKey(resourceUrl, contentType, options.includeQueryParams);
  if (cache[cacheKey] != null) {
    return cache[cacheKey];
  }
  if (options.cacheBust) {
    resourceUrl += (/\?/.test(resourceUrl) ? "&" : "?") + new Date().getTime();
  }
  let dataURL;
  try {
    const content = await fetchAsDataURL(resourceUrl, options.fetchRequestInit, ({ res, result }) => {
      if (!contentType) {
        contentType = res.headers.get("Content-Type") || "";
      }
      return getContentFromDataUrl(result);
    });
    dataURL = makeDataUrl(content, contentType);
  } catch (error) {
    dataURL = options.imagePlaceholder || "";
    let msg = `Failed to fetch resource: ${resourceUrl}`;
    if (error) {
      msg = typeof error === "string" ? error : error.message;
    }
    if (msg) {
      console.warn(msg);
    }
  }
  cache[cacheKey] = dataURL;
  return dataURL;
}

// node_modules/html-to-image/es/clone-node.js
async function cloneCanvasElement(canvas) {
  const dataURL = canvas.toDataURL();
  if (dataURL === "data:,") {
    return canvas.cloneNode(false);
  }
  return createImage(dataURL);
}
async function cloneVideoElement(video, options) {
  if (video.currentSrc) {
    const canvas = document.createElement("canvas");
    const ctx = canvas.getContext("2d");
    canvas.width = video.clientWidth;
    canvas.height = video.clientHeight;
    ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
    const dataURL2 = canvas.toDataURL();
    return createImage(dataURL2);
  }
  const poster = video.poster;
  const contentType = getMimeType(poster);
  const dataURL = await resourceToDataURL(poster, contentType, options);
  return createImage(dataURL);
}
async function cloneIFrameElement(iframe) {
  var _a;
  try {
    if ((_a = iframe === null || iframe === void 0 ? void 0 : iframe.contentDocument) === null || _a === void 0 ? void 0 : _a.body) {
      return await cloneNode(iframe.contentDocument.body, {}, true);
    }
  } catch (_b) {
  }
  return iframe.cloneNode(false);
}
async function cloneSingleNode(node, options) {
  if (isInstanceOfElement(node, HTMLCanvasElement)) {
    return cloneCanvasElement(node);
  }
  if (isInstanceOfElement(node, HTMLVideoElement)) {
    return cloneVideoElement(node, options);
  }
  if (isInstanceOfElement(node, HTMLIFrameElement)) {
    return cloneIFrameElement(node);
  }
  return node.cloneNode(false);
}
var isSlotElement = (node) => node.tagName != null && node.tagName.toUpperCase() === "SLOT";
async function cloneChildren(nativeNode, clonedNode, options) {
  var _a, _b;
  let children = [];
  if (isSlotElement(nativeNode) && nativeNode.assignedNodes) {
    children = toArray(nativeNode.assignedNodes());
  } else if (isInstanceOfElement(nativeNode, HTMLIFrameElement) && ((_a = nativeNode.contentDocument) === null || _a === void 0 ? void 0 : _a.body)) {
    children = toArray(nativeNode.contentDocument.body.childNodes);
  } else {
    children = toArray(((_b = nativeNode.shadowRoot) !== null && _b !== void 0 ? _b : nativeNode).childNodes);
  }
  if (children.length === 0 || isInstanceOfElement(nativeNode, HTMLVideoElement)) {
    return clonedNode;
  }
  await children.reduce((deferred, child) => deferred.then(() => cloneNode(child, options)).then((clonedChild) => {
    if (clonedChild) {
      clonedNode.appendChild(clonedChild);
    }
  }), Promise.resolve());
  return clonedNode;
}
function cloneCSSStyle(nativeNode, clonedNode) {
  const targetStyle = clonedNode.style;
  if (!targetStyle) {
    return;
  }
  const sourceStyle = window.getComputedStyle(nativeNode);
  if (sourceStyle.cssText) {
    targetStyle.cssText = sourceStyle.cssText;
    targetStyle.transformOrigin = sourceStyle.transformOrigin;
  } else {
    toArray(sourceStyle).forEach((name) => {
      let value = sourceStyle.getPropertyValue(name);
      if (name === "font-size" && value.endsWith("px")) {
        const reducedFont = Math.floor(parseFloat(value.substring(0, value.length - 2))) - 0.1;
        value = `${reducedFont}px`;
      }
      if (isInstanceOfElement(nativeNode, HTMLIFrameElement) && name === "display" && value === "inline") {
        value = "block";
      }
      if (name === "d" && clonedNode.getAttribute("d")) {
        value = `path(${clonedNode.getAttribute("d")})`;
      }
      targetStyle.setProperty(name, value, sourceStyle.getPropertyPriority(name));
    });
  }
}
function cloneInputValue(nativeNode, clonedNode) {
  if (isInstanceOfElement(nativeNode, HTMLTextAreaElement)) {
    clonedNode.innerHTML = nativeNode.value;
  }
  if (isInstanceOfElement(nativeNode, HTMLInputElement)) {
    clonedNode.setAttribute("value", nativeNode.value);
  }
}
function cloneSelectValue(nativeNode, clonedNode) {
  if (isInstanceOfElement(nativeNode, HTMLSelectElement)) {
    const clonedSelect = clonedNode;
    const selectedOption = Array.from(clonedSelect.children).find((child) => nativeNode.value === child.getAttribute("value"));
    if (selectedOption) {
      selectedOption.setAttribute("selected", "");
    }
  }
}
function decorate(nativeNode, clonedNode) {
  if (isInstanceOfElement(clonedNode, Element)) {
    cloneCSSStyle(nativeNode, clonedNode);
    clonePseudoElements(nativeNode, clonedNode);
    cloneInputValue(nativeNode, clonedNode);
    cloneSelectValue(nativeNode, clonedNode);
  }
  return clonedNode;
}
async function ensureSVGSymbols(clone, options) {
  const uses = clone.querySelectorAll ? clone.querySelectorAll("use") : [];
  if (uses.length === 0) {
    return clone;
  }
  const processedDefs = {};
  for (let i = 0; i < uses.length; i++) {
    const use = uses[i];
    const id = use.getAttribute("xlink:href");
    if (id) {
      const exist = clone.querySelector(id);
      const definition = document.querySelector(id);
      if (!exist && definition && !processedDefs[id]) {
        processedDefs[id] = await cloneNode(definition, options, true);
      }
    }
  }
  const nodes = Object.values(processedDefs);
  if (nodes.length) {
    const ns = "http://www.w3.org/1999/xhtml";
    const svg = document.createElementNS(ns, "svg");
    svg.setAttribute("xmlns", ns);
    svg.style.position = "absolute";
    svg.style.width = "0";
    svg.style.height = "0";
    svg.style.overflow = "hidden";
    svg.style.display = "none";
    const defs = document.createElementNS(ns, "defs");
    svg.appendChild(defs);
    for (let i = 0; i < nodes.length; i++) {
      defs.appendChild(nodes[i]);
    }
    clone.appendChild(svg);
  }
  return clone;
}
async function cloneNode(node, options, isRoot) {
  if (!isRoot && options.filter && !options.filter(node)) {
    return null;
  }
  return Promise.resolve(node).then((clonedNode) => cloneSingleNode(clonedNode, options)).then((clonedNode) => cloneChildren(node, clonedNode, options)).then((clonedNode) => decorate(node, clonedNode)).then((clonedNode) => ensureSVGSymbols(clonedNode, options));
}

// node_modules/html-to-image/es/embed-resources.js
var URL_REGEX = /url\((['"]?)([^'"]+?)\1\)/g;
var URL_WITH_FORMAT_REGEX = /url\([^)]+\)\s*format\((["']?)([^"']+)\1\)/g;
var FONT_SRC_REGEX = /src:\s*(?:url\([^)]+\)\s*format\([^)]+\)[,;]\s*)+/g;
function toRegex(url) {
  const escaped = url.replace(/([.*+?^${}()|\[\]\/\\])/g, "\\$1");
  return new RegExp(`(url\\(['"]?)(${escaped})(['"]?\\))`, "g");
}
function parseURLs(cssText) {
  const urls = [];
  cssText.replace(URL_REGEX, (raw, quotation, url) => {
    urls.push(url);
    return raw;
  });
  return urls.filter((url) => !isDataUrl(url));
}
async function embed(cssText, resourceURL, baseURL, options, getContentFromUrl) {
  try {
    const resolvedURL = baseURL ? resolveUrl(resourceURL, baseURL) : resourceURL;
    const contentType = getMimeType(resourceURL);
    let dataURL;
    if (getContentFromUrl) {
      const content = await getContentFromUrl(resolvedURL);
      dataURL = makeDataUrl(content, contentType);
    } else {
      dataURL = await resourceToDataURL(resolvedURL, contentType, options);
    }
    return cssText.replace(toRegex(resourceURL), `$1${dataURL}$3`);
  } catch (error) {
  }
  return cssText;
}
function filterPreferredFontFormat(str, { preferredFontFormat }) {
  return !preferredFontFormat ? str : str.replace(FONT_SRC_REGEX, (match) => {
    while (true) {
      const [src, , format] = URL_WITH_FORMAT_REGEX.exec(match) || [];
      if (!format) {
        return "";
      }
      if (format === preferredFontFormat) {
        return `src: ${src};`;
      }
    }
  });
}
function shouldEmbed(url) {
  return url.search(URL_REGEX) !== -1;
}
async function embedResources(cssText, baseUrl, options) {
  if (!shouldEmbed(cssText)) {
    return cssText;
  }
  const filteredCSSText = filterPreferredFontFormat(cssText, options);
  const urls = parseURLs(filteredCSSText);
  return urls.reduce((deferred, url) => deferred.then((css) => embed(css, url, baseUrl, options)), Promise.resolve(filteredCSSText));
}

// node_modules/html-to-image/es/embed-images.js
async function embedProp(propName, node, options) {
  var _a;
  const propValue = (_a = node.style) === null || _a === void 0 ? void 0 : _a.getPropertyValue(propName);
  if (propValue) {
    const cssString = await embedResources(propValue, null, options);
    node.style.setProperty(propName, cssString, node.style.getPropertyPriority(propName));
    return true;
  }
  return false;
}
async function embedBackground(clonedNode, options) {
  if (!await embedProp("background", clonedNode, options)) {
    await embedProp("background-image", clonedNode, options);
  }
  if (!await embedProp("mask", clonedNode, options)) {
    await embedProp("mask-image", clonedNode, options);
  }
}
async function embedImageNode(clonedNode, options) {
  const isImageElement = isInstanceOfElement(clonedNode, HTMLImageElement);
  if (!(isImageElement && !isDataUrl(clonedNode.src)) && !(isInstanceOfElement(clonedNode, SVGImageElement) && !isDataUrl(clonedNode.href.baseVal))) {
    return;
  }
  const url = isImageElement ? clonedNode.src : clonedNode.href.baseVal;
  const dataURL = await resourceToDataURL(url, getMimeType(url), options);
  await new Promise((resolve, reject) => {
    clonedNode.onload = resolve;
    clonedNode.onerror = reject;
    const image = clonedNode;
    if (image.decode) {
      image.decode = resolve;
    }
    if (image.loading === "lazy") {
      image.loading = "eager";
    }
    if (isImageElement) {
      clonedNode.srcset = "";
      clonedNode.src = dataURL;
    } else {
      clonedNode.href.baseVal = dataURL;
    }
  });
}
async function embedChildren(clonedNode, options) {
  const children = toArray(clonedNode.childNodes);
  const deferreds = children.map((child) => embedImages(child, options));
  await Promise.all(deferreds).then(() => clonedNode);
}
async function embedImages(clonedNode, options) {
  if (isInstanceOfElement(clonedNode, Element)) {
    await embedBackground(clonedNode, options);
    await embedImageNode(clonedNode, options);
    await embedChildren(clonedNode, options);
  }
}

// node_modules/html-to-image/es/apply-style.js
function applyStyle(node, options) {
  const { style } = node;
  if (options.backgroundColor) {
    style.backgroundColor = options.backgroundColor;
  }
  if (options.width) {
    style.width = `${options.width}px`;
  }
  if (options.height) {
    style.height = `${options.height}px`;
  }
  const manual = options.style;
  if (manual != null) {
    Object.keys(manual).forEach((key) => {
      style[key] = manual[key];
    });
  }
  return node;
}

// node_modules/html-to-image/es/embed-webfonts.js
var cssFetchCache = {};
async function fetchCSS(url) {
  let cache2 = cssFetchCache[url];
  if (cache2 != null) {
    return cache2;
  }
  const res = await fetch(url);
  const cssText = await res.text();
  cache2 = { url, cssText };
  cssFetchCache[url] = cache2;
  return cache2;
}
async function embedFonts(data, options) {
  let cssText = data.cssText;
  const regexUrl = /url\(["']?([^"')]+)["']?\)/g;
  const fontLocs = cssText.match(/url\([^)]+\)/g) || [];
  const loadFonts = fontLocs.map(async (loc) => {
    let url = loc.replace(regexUrl, "$1");
    if (!url.startsWith("https://")) {
      url = new URL(url, data.url).href;
    }
    return fetchAsDataURL(url, options.fetchRequestInit, ({ result }) => {
      cssText = cssText.replace(loc, `url(${result})`);
      return [loc, result];
    });
  });
  return Promise.all(loadFonts).then(() => cssText);
}
function parseCSS(source) {
  if (source == null) {
    return [];
  }
  const result = [];
  const commentsRegex = /(\/\*[\s\S]*?\*\/)/gi;
  let cssText = source.replace(commentsRegex, "");
  const keyframesRegex = new RegExp("((@.*?keyframes [\\s\\S]*?){([\\s\\S]*?}\\s*?)})", "gi");
  while (true) {
    const matches = keyframesRegex.exec(cssText);
    if (matches === null) {
      break;
    }
    result.push(matches[0]);
  }
  cssText = cssText.replace(keyframesRegex, "");
  const importRegex = /@import[\s\S]*?url\([^)]*\)[\s\S]*?;/gi;
  const combinedCSSRegex = "((\\s*?(?:\\/\\*[\\s\\S]*?\\*\\/)?\\s*?@media[\\s\\S]*?){([\\s\\S]*?)}\\s*?})|(([\\s\\S]*?){([\\s\\S]*?)})";
  const unifiedRegex = new RegExp(combinedCSSRegex, "gi");
  while (true) {
    let matches = importRegex.exec(cssText);
    if (matches === null) {
      matches = unifiedRegex.exec(cssText);
      if (matches === null) {
        break;
      } else {
        importRegex.lastIndex = unifiedRegex.lastIndex;
      }
    } else {
      unifiedRegex.lastIndex = importRegex.lastIndex;
    }
    result.push(matches[0]);
  }
  return result;
}
async function getCSSRules(styleSheets, options) {
  const ret = [];
  const deferreds = [];
  styleSheets.forEach((sheet) => {
    if ("cssRules" in sheet) {
      try {
        toArray(sheet.cssRules || []).forEach((item, index) => {
          if (item.type === CSSRule.IMPORT_RULE) {
            let importIndex = index + 1;
            const url = item.href;
            const deferred = fetchCSS(url).then((metadata) => embedFonts(metadata, options)).then((cssText) => parseCSS(cssText).forEach((rule) => {
              try {
                sheet.insertRule(rule, rule.startsWith("@import") ? importIndex += 1 : sheet.cssRules.length);
              } catch (error) {
                console.error("Error inserting rule from remote css", {
                  rule,
                  error
                });
              }
            })).catch((e) => {
              console.error("Error loading remote css", e.toString());
            });
            deferreds.push(deferred);
          }
        });
      } catch (e) {
        const inline = styleSheets.find((a) => a.href == null) || document.styleSheets[0];
        if (sheet.href != null) {
          deferreds.push(fetchCSS(sheet.href).then((metadata) => embedFonts(metadata, options)).then((cssText) => parseCSS(cssText).forEach((rule) => {
            inline.insertRule(rule, sheet.cssRules.length);
          })).catch((err) => {
            console.error("Error loading remote stylesheet", err);
          }));
        }
        console.error("Error inlining remote css file", e);
      }
    }
  });
  return Promise.all(deferreds).then(() => {
    styleSheets.forEach((sheet) => {
      if ("cssRules" in sheet) {
        try {
          toArray(sheet.cssRules || []).forEach((item) => {
            ret.push(item);
          });
        } catch (e) {
          console.error(`Error while reading CSS rules from ${sheet.href}`, e);
        }
      }
    });
    return ret;
  });
}
function getWebFontRules(cssRules) {
  return cssRules.filter((rule) => rule.type === CSSRule.FONT_FACE_RULE).filter((rule) => shouldEmbed(rule.style.getPropertyValue("src")));
}
async function parseWebFontRules(node, options) {
  if (node.ownerDocument == null) {
    throw new Error("Provided element is not within a Document");
  }
  const styleSheets = toArray(node.ownerDocument.styleSheets);
  const cssRules = await getCSSRules(styleSheets, options);
  return getWebFontRules(cssRules);
}
async function getWebFontCSS(node, options) {
  const rules = await parseWebFontRules(node, options);
  const cssTexts = await Promise.all(rules.map((rule) => {
    const baseUrl = rule.parentStyleSheet ? rule.parentStyleSheet.href : null;
    return embedResources(rule.cssText, baseUrl, options);
  }));
  return cssTexts.join("\n");
}
async function embedWebFonts(clonedNode, options) {
  const cssText = options.fontEmbedCSS != null ? options.fontEmbedCSS : options.skipFonts ? null : await getWebFontCSS(clonedNode, options);
  if (cssText) {
    const styleNode = document.createElement("style");
    const sytleContent = document.createTextNode(cssText);
    styleNode.appendChild(sytleContent);
    if (clonedNode.firstChild) {
      clonedNode.insertBefore(styleNode, clonedNode.firstChild);
    } else {
      clonedNode.appendChild(styleNode);
    }
  }
}

// node_modules/html-to-image/es/index.js
async function toSvg(node, options = {}) {
  const { width, height } = getImageSize(node, options);
  const clonedNode = await cloneNode(node, options, true);
  await embedWebFonts(clonedNode, options);
  await embedImages(clonedNode, options);
  applyStyle(clonedNode, options);
  const datauri = await nodeToDataURL(clonedNode, width, height);
  return datauri;
}
async function toCanvas(node, options = {}) {
  const { width, height } = getImageSize(node, options);
  const svg = await toSvg(node, options);
  const img = await createImage(svg);
  const canvas = document.createElement("canvas");
  const context = canvas.getContext("2d");
  const ratio = options.pixelRatio || getPixelRatio();
  const canvasWidth = options.canvasWidth || width;
  const canvasHeight = options.canvasHeight || height;
  canvas.width = canvasWidth * ratio;
  canvas.height = canvasHeight * ratio;
  if (!options.skipAutoScale) {
    checkCanvasDimensions(canvas);
  }
  canvas.style.width = `${canvasWidth}`;
  canvas.style.height = `${canvasHeight}`;
  if (options.backgroundColor) {
    context.fillStyle = options.backgroundColor;
    context.fillRect(0, 0, canvas.width, canvas.height);
  }
  context.drawImage(img, 0, 0, canvas.width, canvas.height);
  return canvas;
}
async function toPng(node, options = {}) {
  const canvas = await toCanvas(node, options);
  return canvas.toDataURL();
}

// src/canvasNodeScreenshot.ts
async function screenshotNodeElement(node) {
  const workspace = document.querySelector("body");
  const currentNodeElement = node.nodeEl.querySelector(".canvas-node-container");
  const canvasBackgroundColor = (workspace == null ? void 0 : workspace.classList.contains("theme-light")) ? "#ffffff" : "#1e1e1e";
  if (currentNodeElement) {
    try {
      const nodeDataURL = await toPng(currentNodeElement);
      const downloadIt = (dataURL) => {
        const downloaderLink = document.createElement("a");
        downloaderLink.download = "canvas-node-screenshot.png";
        downloaderLink.href = dataURL;
        downloaderLink.click();
      };
      const screenshot = new Image();
      screenshot.src = nodeDataURL;
      screenshot.onload = () => {
        const canvas = document.createElement("canvas");
        const context = canvas.getContext("2d");
        const width = screenshot.width + 10;
        const height = screenshot.height + 10;
        canvas.width = width;
        canvas.height = height;
        if (context) {
          context.fillStyle = canvasBackgroundColor;
          context.fillRect(0, 0, width, height);
          const x = (width - screenshot.width) / 2;
          const y = (height - screenshot.height) / 2;
          context.drawImage(screenshot, x, y);
          const screenshotDataURL = canvas.toDataURL();
          downloadIt(screenshotDataURL);
        } else {
          console.error("Canvas Context not found !");
        }
      };
    } catch (error) {
      console.error("Error capturing screenshot: ", error);
    }
  } else {
    console.error("Node Element not found !");
  }
}

// src/screenshotMenuOption.ts
async function onScreenshotOption(menu, node) {
  menu.addSeparator();
  menu.addItem((targetNode) => {
    targetNode.setTitle("Capture node screenshot").setIcon("scissors-square-dashed-bottom").onClick(async () => {
      await screenshotNodeElement(node);
    });
  });
}

// main.ts
var ScreenshotNodePlugin = class extends import_obsidian.Plugin {
  async onload() {
    const workspace = this.app.workspace;
    if (!workspace) {
      throw new Error("Workspace not found!");
    }
    this.registerEvent(
      workspace.on("canvas:node-menu", async (menu, node) => {
        await onScreenshotOption(menu, node);
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJub2RlX21vZHVsZXMvaHRtbC10by1pbWFnZS9zcmMvdXRpbC50cyIsICJub2RlX21vZHVsZXMvaHRtbC10by1pbWFnZS9zcmMvY2xvbmUtcHNldWRvcy50cyIsICJub2RlX21vZHVsZXMvaHRtbC10by1pbWFnZS9zcmMvbWltZXMudHMiLCAibm9kZV9tb2R1bGVzL2h0bWwtdG8taW1hZ2Uvc3JjL2RhdGF1cmwudHMiLCAibm9kZV9tb2R1bGVzL2h0bWwtdG8taW1hZ2Uvc3JjL2Nsb25lLW5vZGUudHMiLCAibm9kZV9tb2R1bGVzL2h0bWwtdG8taW1hZ2Uvc3JjL2VtYmVkLXJlc291cmNlcy50cyIsICJub2RlX21vZHVsZXMvaHRtbC10by1pbWFnZS9zcmMvZW1iZWQtaW1hZ2VzLnRzIiwgIm5vZGVfbW9kdWxlcy9odG1sLXRvLWltYWdlL3NyYy9hcHBseS1zdHlsZS50cyIsICJub2RlX21vZHVsZXMvaHRtbC10by1pbWFnZS9zcmMvZW1iZWQtd2ViZm9udHMudHMiLCAibm9kZV9tb2R1bGVzL2h0bWwtdG8taW1hZ2Uvc3JjL2luZGV4LnRzIiwgInNyYy9jYW52YXNOb2RlU2NyZWVuc2hvdC50cyIsICJzcmMvc2NyZWVuc2hvdE1lbnVPcHRpb24udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IE1lbnUsIFBsdWdpbiB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBDYW52YXNOb2RlLCBXb3Jrc3BhY2VXaXRoQ2FudmFzIH0gZnJvbSBcInNyYy9AdHlwZXMvdHlwZXNcIjtcclxuaW1wb3J0IG9uU2NyZWVuc2hvdE9wdGlvbiBmcm9tIFwic3JjL3NjcmVlbnNob3RNZW51T3B0aW9uXCI7XHJcblxyXG4vKipcclxuICogUGx1Z2luIHRvIGVuYWJsZSBjYW52YXMgbm9kZSBzY3JlZW5zaG90IGZ1bmN0aW9uYWxpdHkgaW4gT2JzaWRpYW4uXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY3JlZW5zaG90Tm9kZVBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XHJcblx0YXN5bmMgb25sb2FkKCk6IFByb21pc2U8dm9pZD4ge1xyXG5cdFx0XHJcblx0XHRjb25zdCB3b3Jrc3BhY2U6IFdvcmtzcGFjZVdpdGhDYW52YXMgPSB0aGlzLmFwcC53b3Jrc3BhY2UgYXMgV29ya3NwYWNlV2l0aENhbnZhcztcclxuXHJcblx0XHRpZiAoIXdvcmtzcGFjZSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJXb3Jrc3BhY2Ugbm90IGZvdW5kIVwiKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXHJcblx0XHRcdHdvcmtzcGFjZS5vbihcImNhbnZhczpub2RlLW1lbnVcIiwgYXN5bmMgKG1lbnU6IE1lbnUsIG5vZGU6IENhbnZhc05vZGUpID0+IHtcclxuXHRcdFx0XHRhd2FpdCBvblNjcmVlbnNob3RPcHRpb24obWVudSwgbm9kZSk7XHJcblx0XHRcdH0pXHJcblx0XHQpO1xyXG5cdH1cclxufSIsICJpbXBvcnQgdHlwZSB7IE9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJ1xuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVVybCh1cmw6IHN0cmluZywgYmFzZVVybDogc3RyaW5nIHwgbnVsbCk6IHN0cmluZyB7XG4gIC8vIHVybCBpcyBhYnNvbHV0ZSBhbHJlYWR5XG4gIGlmICh1cmwubWF0Y2goL15bYS16XSs6XFwvXFwvL2kpKSB7XG4gICAgcmV0dXJuIHVybFxuICB9XG5cbiAgLy8gdXJsIGlzIGFic29sdXRlIGFscmVhZHksIHdpdGhvdXQgcHJvdG9jb2xcbiAgaWYgKHVybC5tYXRjaCgvXlxcL1xcLy8pKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCArIHVybFxuICB9XG5cbiAgLy8gZGF0YVVSSSwgbWFpbHRvOiwgdGVsOiwgZXRjLlxuICBpZiAodXJsLm1hdGNoKC9eW2Etel0rOi9pKSkge1xuICAgIHJldHVybiB1cmxcbiAgfVxuXG4gIGNvbnN0IGRvYyA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgpXG4gIGNvbnN0IGJhc2UgPSBkb2MuY3JlYXRlRWxlbWVudCgnYmFzZScpXG4gIGNvbnN0IGEgPSBkb2MuY3JlYXRlRWxlbWVudCgnYScpXG5cbiAgZG9jLmhlYWQuYXBwZW5kQ2hpbGQoYmFzZSlcbiAgZG9jLmJvZHkuYXBwZW5kQ2hpbGQoYSlcblxuICBpZiAoYmFzZVVybCkge1xuICAgIGJhc2UuaHJlZiA9IGJhc2VVcmxcbiAgfVxuXG4gIGEuaHJlZiA9IHVybFxuXG4gIHJldHVybiBhLmhyZWZcbn1cblxuZXhwb3J0IGNvbnN0IHV1aWQgPSAoKCkgPT4ge1xuICAvLyBnZW5lcmF0ZSB1dWlkIGZvciBjbGFzc05hbWUgb2YgcHNldWRvIGVsZW1lbnRzLlxuICAvLyBXZSBzaG91bGQgbm90IHVzZSBHVUlEcywgb3RoZXJ3aXNlIHBzZXVkbyBlbGVtZW50cyBzb21ldGltZXMgY2Fubm90IGJlIGNhcHR1cmVkLlxuICBsZXQgY291bnRlciA9IDBcblxuICAvLyByZWY6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzYyNDg3MjIvMjUxOTM3M1xuICBjb25zdCByYW5kb20gPSAoKSA9PlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgYDAwMDAkeygoTWF0aC5yYW5kb20oKSAqIDM2ICoqIDQpIDw8IDApLnRvU3RyaW5nKDM2KX1gLnNsaWNlKC00KVxuXG4gIHJldHVybiAoKSA9PiB7XG4gICAgY291bnRlciArPSAxXG4gICAgcmV0dXJuIGB1JHtyYW5kb20oKX0ke2NvdW50ZXJ9YFxuICB9XG59KSgpXG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxheTxUPihtczogbnVtYmVyKSB7XG4gIHJldHVybiAoYXJnczogVCkgPT5cbiAgICBuZXcgUHJvbWlzZTxUPigocmVzb2x2ZSkgPT4ge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKGFyZ3MpLCBtcylcbiAgICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9BcnJheTxUPihhcnJheUxpa2U6IGFueSk6IFRbXSB7XG4gIGNvbnN0IGFycjogVFtdID0gW11cblxuICBmb3IgKGxldCBpID0gMCwgbCA9IGFycmF5TGlrZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBhcnIucHVzaChhcnJheUxpa2VbaV0pXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHB4KG5vZGU6IEhUTUxFbGVtZW50LCBzdHlsZVByb3BlcnR5OiBzdHJpbmcpIHtcbiAgY29uc3Qgd2luID0gbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvd1xuICBjb25zdCB2YWwgPSB3aW4uZ2V0Q29tcHV0ZWRTdHlsZShub2RlKS5nZXRQcm9wZXJ0eVZhbHVlKHN0eWxlUHJvcGVydHkpXG4gIHJldHVybiB2YWwgPyBwYXJzZUZsb2F0KHZhbC5yZXBsYWNlKCdweCcsICcnKSkgOiAwXG59XG5cbmZ1bmN0aW9uIGdldE5vZGVXaWR0aChub2RlOiBIVE1MRWxlbWVudCkge1xuICBjb25zdCBsZWZ0Qm9yZGVyID0gcHgobm9kZSwgJ2JvcmRlci1sZWZ0LXdpZHRoJylcbiAgY29uc3QgcmlnaHRCb3JkZXIgPSBweChub2RlLCAnYm9yZGVyLXJpZ2h0LXdpZHRoJylcbiAgcmV0dXJuIG5vZGUuY2xpZW50V2lkdGggKyBsZWZ0Qm9yZGVyICsgcmlnaHRCb3JkZXJcbn1cblxuZnVuY3Rpb24gZ2V0Tm9kZUhlaWdodChub2RlOiBIVE1MRWxlbWVudCkge1xuICBjb25zdCB0b3BCb3JkZXIgPSBweChub2RlLCAnYm9yZGVyLXRvcC13aWR0aCcpXG4gIGNvbnN0IGJvdHRvbUJvcmRlciA9IHB4KG5vZGUsICdib3JkZXItYm90dG9tLXdpZHRoJylcbiAgcmV0dXJuIG5vZGUuY2xpZW50SGVpZ2h0ICsgdG9wQm9yZGVyICsgYm90dG9tQm9yZGVyXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbWFnZVNpemUodGFyZ2V0Tm9kZTogSFRNTEVsZW1lbnQsIG9wdGlvbnM6IE9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB3aWR0aCA9IG9wdGlvbnMud2lkdGggfHwgZ2V0Tm9kZVdpZHRoKHRhcmdldE5vZGUpXG4gIGNvbnN0IGhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0IHx8IGdldE5vZGVIZWlnaHQodGFyZ2V0Tm9kZSlcblxuICByZXR1cm4geyB3aWR0aCwgaGVpZ2h0IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBpeGVsUmF0aW8oKSB7XG4gIGxldCByYXRpb1xuXG4gIGxldCBGSU5BTF9QUk9DRVNTXG4gIHRyeSB7XG4gICAgRklOQUxfUFJPQ0VTUyA9IHByb2Nlc3NcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIHBhc3NcbiAgfVxuXG4gIGNvbnN0IHZhbCA9XG4gICAgRklOQUxfUFJPQ0VTUyAmJiBGSU5BTF9QUk9DRVNTLmVudlxuICAgICAgPyBGSU5BTF9QUk9DRVNTLmVudi5kZXZpY2VQaXhlbFJhdGlvXG4gICAgICA6IG51bGxcbiAgaWYgKHZhbCkge1xuICAgIHJhdGlvID0gcGFyc2VJbnQodmFsLCAxMClcbiAgICBpZiAoTnVtYmVyLmlzTmFOKHJhdGlvKSkge1xuICAgICAgcmF0aW8gPSAxXG4gICAgfVxuICB9XG4gIHJldHVybiByYXRpbyB8fCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxXG59XG5cbi8vIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2NhbnZhcyNtYXhpbXVtX2NhbnZhc19zaXplXG5jb25zdCBjYW52YXNEaW1lbnNpb25MaW1pdCA9IDE2Mzg0XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0NhbnZhc0RpbWVuc2lvbnMoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCkge1xuICBpZiAoXG4gICAgY2FudmFzLndpZHRoID4gY2FudmFzRGltZW5zaW9uTGltaXQgfHxcbiAgICBjYW52YXMuaGVpZ2h0ID4gY2FudmFzRGltZW5zaW9uTGltaXRcbiAgKSB7XG4gICAgaWYgKFxuICAgICAgY2FudmFzLndpZHRoID4gY2FudmFzRGltZW5zaW9uTGltaXQgJiZcbiAgICAgIGNhbnZhcy5oZWlnaHQgPiBjYW52YXNEaW1lbnNpb25MaW1pdFxuICAgICkge1xuICAgICAgaWYgKGNhbnZhcy53aWR0aCA+IGNhbnZhcy5oZWlnaHQpIHtcbiAgICAgICAgY2FudmFzLmhlaWdodCAqPSBjYW52YXNEaW1lbnNpb25MaW1pdCAvIGNhbnZhcy53aWR0aFxuICAgICAgICBjYW52YXMud2lkdGggPSBjYW52YXNEaW1lbnNpb25MaW1pdFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FudmFzLndpZHRoICo9IGNhbnZhc0RpbWVuc2lvbkxpbWl0IC8gY2FudmFzLmhlaWdodFxuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gY2FudmFzRGltZW5zaW9uTGltaXRcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNhbnZhcy53aWR0aCA+IGNhbnZhc0RpbWVuc2lvbkxpbWl0KSB7XG4gICAgICBjYW52YXMuaGVpZ2h0ICo9IGNhbnZhc0RpbWVuc2lvbkxpbWl0IC8gY2FudmFzLndpZHRoXG4gICAgICBjYW52YXMud2lkdGggPSBjYW52YXNEaW1lbnNpb25MaW1pdFxuICAgIH0gZWxzZSB7XG4gICAgICBjYW52YXMud2lkdGggKj0gY2FudmFzRGltZW5zaW9uTGltaXQgLyBjYW52YXMuaGVpZ2h0XG4gICAgICBjYW52YXMuaGVpZ2h0ID0gY2FudmFzRGltZW5zaW9uTGltaXRcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbnZhc1RvQmxvYihcbiAgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCxcbiAgb3B0aW9uczogT3B0aW9ucyA9IHt9LFxuKTogUHJvbWlzZTxCbG9iIHwgbnVsbD4ge1xuICBpZiAoY2FudmFzLnRvQmxvYikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgY2FudmFzLnRvQmxvYihcbiAgICAgICAgcmVzb2x2ZSxcbiAgICAgICAgb3B0aW9ucy50eXBlID8gb3B0aW9ucy50eXBlIDogJ2ltYWdlL3BuZycsXG4gICAgICAgIG9wdGlvbnMucXVhbGl0eSA/IG9wdGlvbnMucXVhbGl0eSA6IDEsXG4gICAgICApXG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgIGNvbnN0IGJpbmFyeVN0cmluZyA9IHdpbmRvdy5hdG9iKFxuICAgICAgY2FudmFzXG4gICAgICAgIC50b0RhdGFVUkwoXG4gICAgICAgICAgb3B0aW9ucy50eXBlID8gb3B0aW9ucy50eXBlIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG9wdGlvbnMucXVhbGl0eSA/IG9wdGlvbnMucXVhbGl0eSA6IHVuZGVmaW5lZCxcbiAgICAgICAgKVxuICAgICAgICAuc3BsaXQoJywnKVsxXSxcbiAgICApXG4gICAgY29uc3QgbGVuID0gYmluYXJ5U3RyaW5nLmxlbmd0aFxuICAgIGNvbnN0IGJpbmFyeUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkobGVuKVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgYmluYXJ5QXJyYXlbaV0gPSBiaW5hcnlTdHJpbmcuY2hhckNvZGVBdChpKVxuICAgIH1cblxuICAgIHJlc29sdmUoXG4gICAgICBuZXcgQmxvYihbYmluYXJ5QXJyYXldLCB7XG4gICAgICAgIHR5cGU6IG9wdGlvbnMudHlwZSA/IG9wdGlvbnMudHlwZSA6ICdpbWFnZS9wbmcnLFxuICAgICAgfSksXG4gICAgKVxuICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSW1hZ2UodXJsOiBzdHJpbmcpOiBQcm9taXNlPEhUTUxJbWFnZUVsZW1lbnQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKVxuICAgIGltZy5kZWNvZGUgPSAoKSA9PiByZXNvbHZlKGltZykgYXMgYW55XG4gICAgaW1nLm9ubG9hZCA9ICgpID0+IHJlc29sdmUoaW1nKVxuICAgIGltZy5vbmVycm9yID0gcmVqZWN0XG4gICAgaW1nLmNyb3NzT3JpZ2luID0gJ2Fub255bW91cydcbiAgICBpbWcuZGVjb2RpbmcgPSAnYXN5bmMnXG4gICAgaW1nLnNyYyA9IHVybFxuICB9KVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3ZnVG9EYXRhVVJMKHN2ZzogU1ZHRWxlbWVudCk6IFByb21pc2U8c3RyaW5nPiB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgIC50aGVuKCgpID0+IG5ldyBYTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcoc3ZnKSlcbiAgICAudGhlbihlbmNvZGVVUklDb21wb25lbnQpXG4gICAgLnRoZW4oKGh0bWwpID0+IGBkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGYtOCwke2h0bWx9YClcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG5vZGVUb0RhdGFVUkwoXG4gIG5vZGU6IEhUTUxFbGVtZW50LFxuICB3aWR0aDogbnVtYmVyLFxuICBoZWlnaHQ6IG51bWJlcixcbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IHhtbG5zID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJ1xuICBjb25zdCBzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoeG1sbnMsICdzdmcnKVxuICBjb25zdCBmb3JlaWduT2JqZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHhtbG5zLCAnZm9yZWlnbk9iamVjdCcpXG5cbiAgc3ZnLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCBgJHt3aWR0aH1gKVxuICBzdmcuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBgJHtoZWlnaHR9YClcbiAgc3ZnLnNldEF0dHJpYnV0ZSgndmlld0JveCcsIGAwIDAgJHt3aWR0aH0gJHtoZWlnaHR9YClcblxuICBmb3JlaWduT2JqZWN0LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCAnMTAwJScpXG4gIGZvcmVpZ25PYmplY3Quc2V0QXR0cmlidXRlKCdoZWlnaHQnLCAnMTAwJScpXG4gIGZvcmVpZ25PYmplY3Quc2V0QXR0cmlidXRlKCd4JywgJzAnKVxuICBmb3JlaWduT2JqZWN0LnNldEF0dHJpYnV0ZSgneScsICcwJylcbiAgZm9yZWlnbk9iamVjdC5zZXRBdHRyaWJ1dGUoJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAndHJ1ZScpXG5cbiAgc3ZnLmFwcGVuZENoaWxkKGZvcmVpZ25PYmplY3QpXG4gIGZvcmVpZ25PYmplY3QuYXBwZW5kQ2hpbGQobm9kZSlcbiAgcmV0dXJuIHN2Z1RvRGF0YVVSTChzdmcpXG59XG5cbmV4cG9ydCBjb25zdCBpc0luc3RhbmNlT2ZFbGVtZW50ID0gPFxuICBUIGV4dGVuZHMgdHlwZW9mIEVsZW1lbnQgfCB0eXBlb2YgSFRNTEVsZW1lbnQgfCB0eXBlb2YgU1ZHSW1hZ2VFbGVtZW50LFxuPihcbiAgbm9kZTogRWxlbWVudCB8IEhUTUxFbGVtZW50IHwgU1ZHSW1hZ2VFbGVtZW50LFxuICBpbnN0YW5jZTogVCxcbik6IG5vZGUgaXMgVFsncHJvdG90eXBlJ10gPT4ge1xuICBpZiAobm9kZSBpbnN0YW5jZW9mIGluc3RhbmNlKSByZXR1cm4gdHJ1ZVxuXG4gIGNvbnN0IG5vZGVQcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobm9kZSlcblxuICBpZiAobm9kZVByb3RvdHlwZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlXG5cbiAgcmV0dXJuIChcbiAgICBub2RlUHJvdG90eXBlLmNvbnN0cnVjdG9yLm5hbWUgPT09IGluc3RhbmNlLm5hbWUgfHxcbiAgICBpc0luc3RhbmNlT2ZFbGVtZW50KG5vZGVQcm90b3R5cGUsIGluc3RhbmNlKVxuICApXG59XG4iLCAiaW1wb3J0IHsgdXVpZCwgdG9BcnJheSB9IGZyb20gJy4vdXRpbCdcblxudHlwZSBQc2V1ZG8gPSAnOmJlZm9yZScgfCAnOmFmdGVyJ1xuXG5mdW5jdGlvbiBmb3JtYXRDU1NUZXh0KHN0eWxlOiBDU1NTdHlsZURlY2xhcmF0aW9uKSB7XG4gIGNvbnN0IGNvbnRlbnQgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdjb250ZW50JylcbiAgcmV0dXJuIGAke3N0eWxlLmNzc1RleHR9IGNvbnRlbnQ6ICcke2NvbnRlbnQucmVwbGFjZSgvJ3xcIi9nLCAnJyl9JztgXG59XG5cbmZ1bmN0aW9uIGZvcm1hdENTU1Byb3BlcnRpZXMoc3R5bGU6IENTU1N0eWxlRGVjbGFyYXRpb24pIHtcbiAgcmV0dXJuIHRvQXJyYXk8c3RyaW5nPihzdHlsZSlcbiAgICAubWFwKChuYW1lKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSlcbiAgICAgIGNvbnN0IHByaW9yaXR5ID0gc3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eShuYW1lKVxuXG4gICAgICByZXR1cm4gYCR7bmFtZX06ICR7dmFsdWV9JHtwcmlvcml0eSA/ICcgIWltcG9ydGFudCcgOiAnJ307YFxuICAgIH0pXG4gICAgLmpvaW4oJyAnKVxufVxuXG5mdW5jdGlvbiBnZXRQc2V1ZG9FbGVtZW50U3R5bGUoXG4gIGNsYXNzTmFtZTogc3RyaW5nLFxuICBwc2V1ZG86IFBzZXVkbyxcbiAgc3R5bGU6IENTU1N0eWxlRGVjbGFyYXRpb24sXG4pOiBUZXh0IHtcbiAgY29uc3Qgc2VsZWN0b3IgPSBgLiR7Y2xhc3NOYW1lfToke3BzZXVkb31gXG4gIGNvbnN0IGNzc1RleHQgPSBzdHlsZS5jc3NUZXh0XG4gICAgPyBmb3JtYXRDU1NUZXh0KHN0eWxlKVxuICAgIDogZm9ybWF0Q1NTUHJvcGVydGllcyhzdHlsZSlcblxuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYCR7c2VsZWN0b3J9eyR7Y3NzVGV4dH19YClcbn1cblxuZnVuY3Rpb24gY2xvbmVQc2V1ZG9FbGVtZW50PFQgZXh0ZW5kcyBIVE1MRWxlbWVudD4oXG4gIG5hdGl2ZU5vZGU6IFQsXG4gIGNsb25lZE5vZGU6IFQsXG4gIHBzZXVkbzogUHNldWRvLFxuKSB7XG4gIGNvbnN0IHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobmF0aXZlTm9kZSwgcHNldWRvKVxuICBjb25zdCBjb250ZW50ID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnY29udGVudCcpXG4gIGlmIChjb250ZW50ID09PSAnJyB8fCBjb250ZW50ID09PSAnbm9uZScpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IGNsYXNzTmFtZSA9IHV1aWQoKVxuICB0cnkge1xuICAgIGNsb25lZE5vZGUuY2xhc3NOYW1lID0gYCR7Y2xvbmVkTm9kZS5jbGFzc05hbWV9ICR7Y2xhc3NOYW1lfWBcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpXG4gIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChnZXRQc2V1ZG9FbGVtZW50U3R5bGUoY2xhc3NOYW1lLCBwc2V1ZG8sIHN0eWxlKSlcbiAgY2xvbmVkTm9kZS5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZVBzZXVkb0VsZW1lbnRzPFQgZXh0ZW5kcyBIVE1MRWxlbWVudD4oXG4gIG5hdGl2ZU5vZGU6IFQsXG4gIGNsb25lZE5vZGU6IFQsXG4pIHtcbiAgY2xvbmVQc2V1ZG9FbGVtZW50KG5hdGl2ZU5vZGUsIGNsb25lZE5vZGUsICc6YmVmb3JlJylcbiAgY2xvbmVQc2V1ZG9FbGVtZW50KG5hdGl2ZU5vZGUsIGNsb25lZE5vZGUsICc6YWZ0ZXInKVxufVxuIiwgImNvbnN0IFdPRkYgPSAnYXBwbGljYXRpb24vZm9udC13b2ZmJ1xuY29uc3QgSlBFRyA9ICdpbWFnZS9qcGVnJ1xuY29uc3QgbWltZXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XG4gIHdvZmY6IFdPRkYsXG4gIHdvZmYyOiBXT0ZGLFxuICB0dGY6ICdhcHBsaWNhdGlvbi9mb250LXRydWV0eXBlJyxcbiAgZW90OiAnYXBwbGljYXRpb24vdm5kLm1zLWZvbnRvYmplY3QnLFxuICBwbmc6ICdpbWFnZS9wbmcnLFxuICBqcGc6IEpQRUcsXG4gIGpwZWc6IEpQRUcsXG4gIGdpZjogJ2ltYWdlL2dpZicsXG4gIHRpZmY6ICdpbWFnZS90aWZmJyxcbiAgc3ZnOiAnaW1hZ2Uvc3ZnK3htbCcsXG4gIHdlYnA6ICdpbWFnZS93ZWJwJyxcbn1cblxuZnVuY3Rpb24gZ2V0RXh0ZW5zaW9uKHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgbWF0Y2ggPSAvXFwuKFteLi9dKj8pJC9nLmV4ZWModXJsKVxuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNaW1lVHlwZSh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IGV4dGVuc2lvbiA9IGdldEV4dGVuc2lvbih1cmwpLnRvTG93ZXJDYXNlKClcbiAgcmV0dXJuIG1pbWVzW2V4dGVuc2lvbl0gfHwgJydcbn1cbiIsICJpbXBvcnQgeyBPcHRpb25zIH0gZnJvbSAnLi90eXBlcydcblxuZnVuY3Rpb24gZ2V0Q29udGVudEZyb21EYXRhVXJsKGRhdGFVUkw6IHN0cmluZykge1xuICByZXR1cm4gZGF0YVVSTC5zcGxpdCgvLC8pWzFdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGFVcmwodXJsOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHVybC5zZWFyY2goL14oZGF0YTopLykgIT09IC0xXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlRGF0YVVybChjb250ZW50OiBzdHJpbmcsIG1pbWVUeXBlOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGBkYXRhOiR7bWltZVR5cGV9O2Jhc2U2NCwke2NvbnRlbnR9YFxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hBc0RhdGFVUkw8VD4oXG4gIHVybDogc3RyaW5nLFxuICBpbml0OiBSZXF1ZXN0SW5pdCB8IHVuZGVmaW5lZCxcbiAgcHJvY2VzczogKGRhdGE6IHsgcmVzdWx0OiBzdHJpbmc7IHJlczogUmVzcG9uc2UgfSkgPT4gVCxcbik6IFByb21pc2U8VD4ge1xuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh1cmwsIGluaXQpXG4gIGlmIChyZXMuc3RhdHVzID09PSA0MDQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFJlc291cmNlIFwiJHtyZXMudXJsfVwiIG5vdCBmb3VuZGApXG4gIH1cbiAgY29uc3QgYmxvYiA9IGF3YWl0IHJlcy5ibG9iKClcbiAgcmV0dXJuIG5ldyBQcm9taXNlPFQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgcmVhZGVyLm9uZXJyb3IgPSByZWplY3RcbiAgICByZWFkZXIub25sb2FkZW5kID0gKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVzb2x2ZShwcm9jZXNzKHsgcmVzLCByZXN1bHQ6IHJlYWRlci5yZXN1bHQgYXMgc3RyaW5nIH0pKVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGJsb2IpXG4gIH0pXG59XG5cbmNvbnN0IGNhY2hlOiB7IFt1cmw6IHN0cmluZ106IHN0cmluZyB9ID0ge31cblxuZnVuY3Rpb24gZ2V0Q2FjaGVLZXkoXG4gIHVybDogc3RyaW5nLFxuICBjb250ZW50VHlwZTogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICBpbmNsdWRlUXVlcnlQYXJhbXM6IGJvb2xlYW4gfCB1bmRlZmluZWQsXG4pIHtcbiAgbGV0IGtleSA9IHVybC5yZXBsYWNlKC9cXD8uKi8sICcnKVxuXG4gIGlmIChpbmNsdWRlUXVlcnlQYXJhbXMpIHtcbiAgICBrZXkgPSB1cmxcbiAgfVxuXG4gIC8vIGZvbnQgcmVzb3VyY2VcbiAgaWYgKC90dGZ8b3RmfGVvdHx3b2ZmMj8vaS50ZXN0KGtleSkpIHtcbiAgICBrZXkgPSBrZXkucmVwbGFjZSgvLipcXC8vLCAnJylcbiAgfVxuXG4gIHJldHVybiBjb250ZW50VHlwZSA/IGBbJHtjb250ZW50VHlwZX1dJHtrZXl9YCA6IGtleVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVzb3VyY2VUb0RhdGFVUkwoXG4gIHJlc291cmNlVXJsOiBzdHJpbmcsXG4gIGNvbnRlbnRUeXBlOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gIG9wdGlvbnM6IE9wdGlvbnMsXG4pIHtcbiAgY29uc3QgY2FjaGVLZXkgPSBnZXRDYWNoZUtleShcbiAgICByZXNvdXJjZVVybCxcbiAgICBjb250ZW50VHlwZSxcbiAgICBvcHRpb25zLmluY2x1ZGVRdWVyeVBhcmFtcyxcbiAgKVxuXG4gIGlmIChjYWNoZVtjYWNoZUtleV0gIT0gbnVsbCkge1xuICAgIHJldHVybiBjYWNoZVtjYWNoZUtleV1cbiAgfVxuXG4gIC8vIHJlZjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL1hNTEh0dHBSZXF1ZXN0L1VzaW5nX1hNTEh0dHBSZXF1ZXN0I0J5cGFzc2luZ190aGVfY2FjaGVcbiAgaWYgKG9wdGlvbnMuY2FjaGVCdXN0KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgcmVzb3VyY2VVcmwgKz0gKC9cXD8vLnRlc3QocmVzb3VyY2VVcmwpID8gJyYnIDogJz8nKSArIG5ldyBEYXRlKCkuZ2V0VGltZSgpXG4gIH1cblxuICBsZXQgZGF0YVVSTDogc3RyaW5nXG4gIHRyeSB7XG4gICAgY29uc3QgY29udGVudCA9IGF3YWl0IGZldGNoQXNEYXRhVVJMKFxuICAgICAgcmVzb3VyY2VVcmwsXG4gICAgICBvcHRpb25zLmZldGNoUmVxdWVzdEluaXQsXG4gICAgICAoeyByZXMsIHJlc3VsdCB9KSA9PiB7XG4gICAgICAgIGlmICghY29udGVudFR5cGUpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICBjb250ZW50VHlwZSA9IHJlcy5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJykgfHwgJydcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2V0Q29udGVudEZyb21EYXRhVXJsKHJlc3VsdClcbiAgICAgIH0sXG4gICAgKVxuICAgIGRhdGFVUkwgPSBtYWtlRGF0YVVybChjb250ZW50LCBjb250ZW50VHlwZSEpXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZGF0YVVSTCA9IG9wdGlvbnMuaW1hZ2VQbGFjZWhvbGRlciB8fCAnJ1xuXG4gICAgbGV0IG1zZyA9IGBGYWlsZWQgdG8gZmV0Y2ggcmVzb3VyY2U6ICR7cmVzb3VyY2VVcmx9YFxuICAgIGlmIChlcnJvcikge1xuICAgICAgbXNnID0gdHlwZW9mIGVycm9yID09PSAnc3RyaW5nJyA/IGVycm9yIDogZXJyb3IubWVzc2FnZVxuICAgIH1cblxuICAgIGlmIChtc2cpIHtcbiAgICAgIGNvbnNvbGUud2Fybihtc2cpXG4gICAgfVxuICB9XG5cbiAgY2FjaGVbY2FjaGVLZXldID0gZGF0YVVSTFxuICByZXR1cm4gZGF0YVVSTFxufVxuIiwgImltcG9ydCB0eXBlIHsgT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnXG5pbXBvcnQgeyBjbG9uZVBzZXVkb0VsZW1lbnRzIH0gZnJvbSAnLi9jbG9uZS1wc2V1ZG9zJ1xuaW1wb3J0IHsgY3JlYXRlSW1hZ2UsIHRvQXJyYXksIGlzSW5zdGFuY2VPZkVsZW1lbnQgfSBmcm9tICcuL3V0aWwnXG5pbXBvcnQgeyBnZXRNaW1lVHlwZSB9IGZyb20gJy4vbWltZXMnXG5pbXBvcnQgeyByZXNvdXJjZVRvRGF0YVVSTCB9IGZyb20gJy4vZGF0YXVybCdcblxuYXN5bmMgZnVuY3Rpb24gY2xvbmVDYW52YXNFbGVtZW50KGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpIHtcbiAgY29uc3QgZGF0YVVSTCA9IGNhbnZhcy50b0RhdGFVUkwoKVxuICBpZiAoZGF0YVVSTCA9PT0gJ2RhdGE6LCcpIHtcbiAgICByZXR1cm4gY2FudmFzLmNsb25lTm9kZShmYWxzZSkgYXMgSFRNTENhbnZhc0VsZW1lbnRcbiAgfVxuICByZXR1cm4gY3JlYXRlSW1hZ2UoZGF0YVVSTClcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2xvbmVWaWRlb0VsZW1lbnQodmlkZW86IEhUTUxWaWRlb0VsZW1lbnQsIG9wdGlvbnM6IE9wdGlvbnMpIHtcbiAgaWYgKHZpZGVvLmN1cnJlbnRTcmMpIHtcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpXG4gICAgY2FudmFzLndpZHRoID0gdmlkZW8uY2xpZW50V2lkdGhcbiAgICBjYW52YXMuaGVpZ2h0ID0gdmlkZW8uY2xpZW50SGVpZ2h0XG4gICAgY3R4Py5kcmF3SW1hZ2UodmlkZW8sIDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodClcbiAgICBjb25zdCBkYXRhVVJMID0gY2FudmFzLnRvRGF0YVVSTCgpXG4gICAgcmV0dXJuIGNyZWF0ZUltYWdlKGRhdGFVUkwpXG4gIH1cblxuICBjb25zdCBwb3N0ZXIgPSB2aWRlby5wb3N0ZXJcbiAgY29uc3QgY29udGVudFR5cGUgPSBnZXRNaW1lVHlwZShwb3N0ZXIpXG4gIGNvbnN0IGRhdGFVUkwgPSBhd2FpdCByZXNvdXJjZVRvRGF0YVVSTChwb3N0ZXIsIGNvbnRlbnRUeXBlLCBvcHRpb25zKVxuICByZXR1cm4gY3JlYXRlSW1hZ2UoZGF0YVVSTClcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2xvbmVJRnJhbWVFbGVtZW50KGlmcmFtZTogSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgdHJ5IHtcbiAgICBpZiAoaWZyYW1lPy5jb250ZW50RG9jdW1lbnQ/LmJvZHkpIHtcbiAgICAgIHJldHVybiAoYXdhaXQgY2xvbmVOb2RlKFxuICAgICAgICBpZnJhbWUuY29udGVudERvY3VtZW50LmJvZHksXG4gICAgICAgIHt9LFxuICAgICAgICB0cnVlLFxuICAgICAgKSkgYXMgSFRNTEJvZHlFbGVtZW50XG4gICAgfVxuICB9IGNhdGNoIHtcbiAgICAvLyBGYWlsZWQgdG8gY2xvbmUgaWZyYW1lXG4gIH1cblxuICByZXR1cm4gaWZyYW1lLmNsb25lTm9kZShmYWxzZSkgYXMgSFRNTElGcmFtZUVsZW1lbnRcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2xvbmVTaW5nbGVOb2RlPFQgZXh0ZW5kcyBIVE1MRWxlbWVudD4oXG4gIG5vZGU6IFQsXG4gIG9wdGlvbnM6IE9wdGlvbnMsXG4pOiBQcm9taXNlPEhUTUxFbGVtZW50PiB7XG4gIGlmIChpc0luc3RhbmNlT2ZFbGVtZW50KG5vZGUsIEhUTUxDYW52YXNFbGVtZW50KSkge1xuICAgIHJldHVybiBjbG9uZUNhbnZhc0VsZW1lbnQobm9kZSlcbiAgfVxuXG4gIGlmIChpc0luc3RhbmNlT2ZFbGVtZW50KG5vZGUsIEhUTUxWaWRlb0VsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGNsb25lVmlkZW9FbGVtZW50KG5vZGUsIG9wdGlvbnMpXG4gIH1cblxuICBpZiAoaXNJbnN0YW5jZU9mRWxlbWVudChub2RlLCBIVE1MSUZyYW1lRWxlbWVudCkpIHtcbiAgICByZXR1cm4gY2xvbmVJRnJhbWVFbGVtZW50KG5vZGUpXG4gIH1cblxuICByZXR1cm4gbm9kZS5jbG9uZU5vZGUoZmFsc2UpIGFzIFRcbn1cblxuY29uc3QgaXNTbG90RWxlbWVudCA9IChub2RlOiBIVE1MRWxlbWVudCk6IG5vZGUgaXMgSFRNTFNsb3RFbGVtZW50ID0+XG4gIG5vZGUudGFnTmFtZSAhPSBudWxsICYmIG5vZGUudGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnU0xPVCdcblxuYXN5bmMgZnVuY3Rpb24gY2xvbmVDaGlsZHJlbjxUIGV4dGVuZHMgSFRNTEVsZW1lbnQ+KFxuICBuYXRpdmVOb2RlOiBULFxuICBjbG9uZWROb2RlOiBULFxuICBvcHRpb25zOiBPcHRpb25zLFxuKTogUHJvbWlzZTxUPiB7XG4gIGxldCBjaGlsZHJlbjogVFtdID0gW11cblxuICBpZiAoaXNTbG90RWxlbWVudChuYXRpdmVOb2RlKSAmJiBuYXRpdmVOb2RlLmFzc2lnbmVkTm9kZXMpIHtcbiAgICBjaGlsZHJlbiA9IHRvQXJyYXk8VD4obmF0aXZlTm9kZS5hc3NpZ25lZE5vZGVzKCkpXG4gIH0gZWxzZSBpZiAoXG4gICAgaXNJbnN0YW5jZU9mRWxlbWVudChuYXRpdmVOb2RlLCBIVE1MSUZyYW1lRWxlbWVudCkgJiZcbiAgICBuYXRpdmVOb2RlLmNvbnRlbnREb2N1bWVudD8uYm9keVxuICApIHtcbiAgICBjaGlsZHJlbiA9IHRvQXJyYXk8VD4obmF0aXZlTm9kZS5jb250ZW50RG9jdW1lbnQuYm9keS5jaGlsZE5vZGVzKVxuICB9IGVsc2Uge1xuICAgIGNoaWxkcmVuID0gdG9BcnJheTxUPigobmF0aXZlTm9kZS5zaGFkb3dSb290ID8/IG5hdGl2ZU5vZGUpLmNoaWxkTm9kZXMpXG4gIH1cblxuICBpZiAoXG4gICAgY2hpbGRyZW4ubGVuZ3RoID09PSAwIHx8XG4gICAgaXNJbnN0YW5jZU9mRWxlbWVudChuYXRpdmVOb2RlLCBIVE1MVmlkZW9FbGVtZW50KVxuICApIHtcbiAgICByZXR1cm4gY2xvbmVkTm9kZVxuICB9XG5cbiAgYXdhaXQgY2hpbGRyZW4ucmVkdWNlKFxuICAgIChkZWZlcnJlZCwgY2hpbGQpID0+XG4gICAgICBkZWZlcnJlZFxuICAgICAgICAudGhlbigoKSA9PiBjbG9uZU5vZGUoY2hpbGQsIG9wdGlvbnMpKVxuICAgICAgICAudGhlbigoY2xvbmVkQ2hpbGQ6IEhUTUxFbGVtZW50IHwgbnVsbCkgPT4ge1xuICAgICAgICAgIGlmIChjbG9uZWRDaGlsZCkge1xuICAgICAgICAgICAgY2xvbmVkTm9kZS5hcHBlbmRDaGlsZChjbG9uZWRDaGlsZClcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgIFByb21pc2UucmVzb2x2ZSgpLFxuICApXG5cbiAgcmV0dXJuIGNsb25lZE5vZGVcbn1cblxuZnVuY3Rpb24gY2xvbmVDU1NTdHlsZTxUIGV4dGVuZHMgSFRNTEVsZW1lbnQ+KG5hdGl2ZU5vZGU6IFQsIGNsb25lZE5vZGU6IFQpIHtcbiAgY29uc3QgdGFyZ2V0U3R5bGUgPSBjbG9uZWROb2RlLnN0eWxlXG4gIGlmICghdGFyZ2V0U3R5bGUpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IHNvdXJjZVN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobmF0aXZlTm9kZSlcbiAgaWYgKHNvdXJjZVN0eWxlLmNzc1RleHQpIHtcbiAgICB0YXJnZXRTdHlsZS5jc3NUZXh0ID0gc291cmNlU3R5bGUuY3NzVGV4dFxuICAgIHRhcmdldFN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IHNvdXJjZVN0eWxlLnRyYW5zZm9ybU9yaWdpblxuICB9IGVsc2Uge1xuICAgIHRvQXJyYXk8c3RyaW5nPihzb3VyY2VTdHlsZSkuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgbGV0IHZhbHVlID0gc291cmNlU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKVxuICAgICAgaWYgKG5hbWUgPT09ICdmb250LXNpemUnICYmIHZhbHVlLmVuZHNXaXRoKCdweCcpKSB7XG4gICAgICAgIGNvbnN0IHJlZHVjZWRGb250ID1cbiAgICAgICAgICBNYXRoLmZsb29yKHBhcnNlRmxvYXQodmFsdWUuc3Vic3RyaW5nKDAsIHZhbHVlLmxlbmd0aCAtIDIpKSkgLSAwLjFcbiAgICAgICAgdmFsdWUgPSBgJHtyZWR1Y2VkRm9udH1weGBcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBpc0luc3RhbmNlT2ZFbGVtZW50KG5hdGl2ZU5vZGUsIEhUTUxJRnJhbWVFbGVtZW50KSAmJlxuICAgICAgICBuYW1lID09PSAnZGlzcGxheScgJiZcbiAgICAgICAgdmFsdWUgPT09ICdpbmxpbmUnXG4gICAgICApIHtcbiAgICAgICAgdmFsdWUgPSAnYmxvY2snXG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmIChuYW1lID09PSAnZCcgJiYgY2xvbmVkTm9kZS5nZXRBdHRyaWJ1dGUoJ2QnKSkge1xuICAgICAgICB2YWx1ZSA9IGBwYXRoKCR7Y2xvbmVkTm9kZS5nZXRBdHRyaWJ1dGUoJ2QnKX0pYFxuICAgICAgfVxuICAgICAgXG4gICAgICB0YXJnZXRTdHlsZS5zZXRQcm9wZXJ0eShcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHNvdXJjZVN0eWxlLmdldFByb3BlcnR5UHJpb3JpdHkobmFtZSksXG4gICAgICApXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9uZUlucHV0VmFsdWU8VCBleHRlbmRzIEhUTUxFbGVtZW50PihuYXRpdmVOb2RlOiBULCBjbG9uZWROb2RlOiBUKSB7XG4gIGlmIChpc0luc3RhbmNlT2ZFbGVtZW50KG5hdGl2ZU5vZGUsIEhUTUxUZXh0QXJlYUVsZW1lbnQpKSB7XG4gICAgY2xvbmVkTm9kZS5pbm5lckhUTUwgPSBuYXRpdmVOb2RlLnZhbHVlXG4gIH1cblxuICBpZiAoaXNJbnN0YW5jZU9mRWxlbWVudChuYXRpdmVOb2RlLCBIVE1MSW5wdXRFbGVtZW50KSkge1xuICAgIGNsb25lZE5vZGUuc2V0QXR0cmlidXRlKCd2YWx1ZScsIG5hdGl2ZU5vZGUudmFsdWUpXG4gIH1cbn1cblxuZnVuY3Rpb24gY2xvbmVTZWxlY3RWYWx1ZTxUIGV4dGVuZHMgSFRNTEVsZW1lbnQ+KG5hdGl2ZU5vZGU6IFQsIGNsb25lZE5vZGU6IFQpIHtcbiAgaWYgKGlzSW5zdGFuY2VPZkVsZW1lbnQobmF0aXZlTm9kZSwgSFRNTFNlbGVjdEVsZW1lbnQpKSB7XG4gICAgY29uc3QgY2xvbmVkU2VsZWN0ID0gY2xvbmVkTm9kZSBhcyBhbnkgYXMgSFRNTFNlbGVjdEVsZW1lbnRcbiAgICBjb25zdCBzZWxlY3RlZE9wdGlvbiA9IEFycmF5LmZyb20oY2xvbmVkU2VsZWN0LmNoaWxkcmVuKS5maW5kKFxuICAgICAgKGNoaWxkKSA9PiBuYXRpdmVOb2RlLnZhbHVlID09PSBjaGlsZC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyksXG4gICAgKVxuXG4gICAgaWYgKHNlbGVjdGVkT3B0aW9uKSB7XG4gICAgICBzZWxlY3RlZE9wdGlvbi5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJycpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlY29yYXRlPFQgZXh0ZW5kcyBIVE1MRWxlbWVudD4obmF0aXZlTm9kZTogVCwgY2xvbmVkTm9kZTogVCk6IFQge1xuICBpZiAoaXNJbnN0YW5jZU9mRWxlbWVudChjbG9uZWROb2RlLCBFbGVtZW50KSkge1xuICAgIGNsb25lQ1NTU3R5bGUobmF0aXZlTm9kZSwgY2xvbmVkTm9kZSlcbiAgICBjbG9uZVBzZXVkb0VsZW1lbnRzKG5hdGl2ZU5vZGUsIGNsb25lZE5vZGUpXG4gICAgY2xvbmVJbnB1dFZhbHVlKG5hdGl2ZU5vZGUsIGNsb25lZE5vZGUpXG4gICAgY2xvbmVTZWxlY3RWYWx1ZShuYXRpdmVOb2RlLCBjbG9uZWROb2RlKVxuICB9XG5cbiAgcmV0dXJuIGNsb25lZE5vZGVcbn1cblxuYXN5bmMgZnVuY3Rpb24gZW5zdXJlU1ZHU3ltYm9sczxUIGV4dGVuZHMgSFRNTEVsZW1lbnQ+KFxuICBjbG9uZTogVCxcbiAgb3B0aW9uczogT3B0aW9ucyxcbikge1xuICBjb25zdCB1c2VzID0gY2xvbmUucXVlcnlTZWxlY3RvckFsbCA/IGNsb25lLnF1ZXJ5U2VsZWN0b3JBbGwoJ3VzZScpIDogW11cbiAgaWYgKHVzZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGNsb25lXG4gIH1cblxuICBjb25zdCBwcm9jZXNzZWREZWZzOiB7IFtrZXk6IHN0cmluZ106IEhUTUxFbGVtZW50IH0gPSB7fVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHVzZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB1c2UgPSB1c2VzW2ldXG4gICAgY29uc3QgaWQgPSB1c2UuZ2V0QXR0cmlidXRlKCd4bGluazpocmVmJylcbiAgICBpZiAoaWQpIHtcbiAgICAgIGNvbnN0IGV4aXN0ID0gY2xvbmUucXVlcnlTZWxlY3RvcihpZClcbiAgICAgIGNvbnN0IGRlZmluaXRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGlkKSBhcyBIVE1MRWxlbWVudFxuICAgICAgaWYgKCFleGlzdCAmJiBkZWZpbml0aW9uICYmICFwcm9jZXNzZWREZWZzW2lkXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYXdhaXQtaW4tbG9vcFxuICAgICAgICBwcm9jZXNzZWREZWZzW2lkXSA9IChhd2FpdCBjbG9uZU5vZGUoZGVmaW5pdGlvbiwgb3B0aW9ucywgdHJ1ZSkpIVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG5vZGVzID0gT2JqZWN0LnZhbHVlcyhwcm9jZXNzZWREZWZzKVxuICBpZiAobm9kZXMubGVuZ3RoKSB7XG4gICAgY29uc3QgbnMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCdcbiAgICBjb25zdCBzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobnMsICdzdmcnKVxuICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ3htbG5zJywgbnMpXG4gICAgc3ZnLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJ1xuICAgIHN2Zy5zdHlsZS53aWR0aCA9ICcwJ1xuICAgIHN2Zy5zdHlsZS5oZWlnaHQgPSAnMCdcbiAgICBzdmcuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJ1xuICAgIHN2Zy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG5cbiAgICBjb25zdCBkZWZzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5zLCAnZGVmcycpXG4gICAgc3ZnLmFwcGVuZENoaWxkKGRlZnMpXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZWZzLmFwcGVuZENoaWxkKG5vZGVzW2ldKVxuICAgIH1cblxuICAgIGNsb25lLmFwcGVuZENoaWxkKHN2ZylcbiAgfVxuXG4gIHJldHVybiBjbG9uZVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2xvbmVOb2RlPFQgZXh0ZW5kcyBIVE1MRWxlbWVudD4oXG4gIG5vZGU6IFQsXG4gIG9wdGlvbnM6IE9wdGlvbnMsXG4gIGlzUm9vdD86IGJvb2xlYW4sXG4pOiBQcm9taXNlPFQgfCBudWxsPiB7XG4gIGlmICghaXNSb290ICYmIG9wdGlvbnMuZmlsdGVyICYmICFvcHRpb25zLmZpbHRlcihub2RlKSkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5vZGUpXG4gICAgLnRoZW4oKGNsb25lZE5vZGUpID0+IGNsb25lU2luZ2xlTm9kZShjbG9uZWROb2RlLCBvcHRpb25zKSBhcyBQcm9taXNlPFQ+KVxuICAgIC50aGVuKChjbG9uZWROb2RlKSA9PiBjbG9uZUNoaWxkcmVuKG5vZGUsIGNsb25lZE5vZGUsIG9wdGlvbnMpKVxuICAgIC50aGVuKChjbG9uZWROb2RlKSA9PiBkZWNvcmF0ZShub2RlLCBjbG9uZWROb2RlKSlcbiAgICAudGhlbigoY2xvbmVkTm9kZSkgPT4gZW5zdXJlU1ZHU3ltYm9scyhjbG9uZWROb2RlLCBvcHRpb25zKSlcbn1cbiIsICJpbXBvcnQgeyBPcHRpb25zIH0gZnJvbSAnLi90eXBlcydcbmltcG9ydCB7IHJlc29sdmVVcmwgfSBmcm9tICcuL3V0aWwnXG5pbXBvcnQgeyBnZXRNaW1lVHlwZSB9IGZyb20gJy4vbWltZXMnXG5pbXBvcnQgeyBpc0RhdGFVcmwsIG1ha2VEYXRhVXJsLCByZXNvdXJjZVRvRGF0YVVSTCB9IGZyb20gJy4vZGF0YXVybCdcblxuY29uc3QgVVJMX1JFR0VYID0gL3VybFxcKChbJ1wiXT8pKFteJ1wiXSs/KVxcMVxcKS9nXG5jb25zdCBVUkxfV0lUSF9GT1JNQVRfUkVHRVggPSAvdXJsXFwoW14pXStcXClcXHMqZm9ybWF0XFwoKFtcIiddPykoW15cIiddKylcXDFcXCkvZ1xuY29uc3QgRk9OVF9TUkNfUkVHRVggPSAvc3JjOlxccyooPzp1cmxcXChbXildK1xcKVxccypmb3JtYXRcXChbXildK1xcKVssO11cXHMqKSsvZ1xuXG5mdW5jdGlvbiB0b1JlZ2V4KHVybDogc3RyaW5nKTogUmVnRXhwIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG4gIGNvbnN0IGVzY2FwZWQgPSB1cmwucmVwbGFjZSgvKFsuKis/XiR7fSgpfFxcW1xcXVxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbiAgcmV0dXJuIG5ldyBSZWdFeHAoYCh1cmxcXFxcKFsnXCJdPykoJHtlc2NhcGVkfSkoWydcIl0/XFxcXCkpYCwgJ2cnKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VVUkxzKGNzc1RleHQ6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgY29uc3QgdXJsczogc3RyaW5nW10gPSBbXVxuXG4gIGNzc1RleHQucmVwbGFjZShVUkxfUkVHRVgsIChyYXcsIHF1b3RhdGlvbiwgdXJsKSA9PiB7XG4gICAgdXJscy5wdXNoKHVybClcbiAgICByZXR1cm4gcmF3XG4gIH0pXG5cbiAgcmV0dXJuIHVybHMuZmlsdGVyKCh1cmwpID0+ICFpc0RhdGFVcmwodXJsKSlcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGVtYmVkKFxuICBjc3NUZXh0OiBzdHJpbmcsXG4gIHJlc291cmNlVVJMOiBzdHJpbmcsXG4gIGJhc2VVUkw6IHN0cmluZyB8IG51bGwsXG4gIG9wdGlvbnM6IE9wdGlvbnMsXG4gIGdldENvbnRlbnRGcm9tVXJsPzogKHVybDogc3RyaW5nKSA9PiBQcm9taXNlPHN0cmluZz4sXG4pOiBQcm9taXNlPHN0cmluZz4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc29sdmVkVVJMID0gYmFzZVVSTCA/IHJlc29sdmVVcmwocmVzb3VyY2VVUkwsIGJhc2VVUkwpIDogcmVzb3VyY2VVUkxcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IGdldE1pbWVUeXBlKHJlc291cmNlVVJMKVxuICAgIGxldCBkYXRhVVJMOiBzdHJpbmdcbiAgICBpZiAoZ2V0Q29udGVudEZyb21VcmwpIHtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBnZXRDb250ZW50RnJvbVVybChyZXNvbHZlZFVSTClcbiAgICAgIGRhdGFVUkwgPSBtYWtlRGF0YVVybChjb250ZW50LCBjb250ZW50VHlwZSlcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YVVSTCA9IGF3YWl0IHJlc291cmNlVG9EYXRhVVJMKHJlc29sdmVkVVJMLCBjb250ZW50VHlwZSwgb3B0aW9ucylcbiAgICB9XG4gICAgcmV0dXJuIGNzc1RleHQucmVwbGFjZSh0b1JlZ2V4KHJlc291cmNlVVJMKSwgYCQxJHtkYXRhVVJMfSQzYClcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBwYXNzXG4gIH1cbiAgcmV0dXJuIGNzc1RleHRcbn1cblxuZnVuY3Rpb24gZmlsdGVyUHJlZmVycmVkRm9udEZvcm1hdChcbiAgc3RyOiBzdHJpbmcsXG4gIHsgcHJlZmVycmVkRm9udEZvcm1hdCB9OiBPcHRpb25zLFxuKTogc3RyaW5nIHtcbiAgcmV0dXJuICFwcmVmZXJyZWRGb250Rm9ybWF0XG4gICAgPyBzdHJcbiAgICA6IHN0ci5yZXBsYWNlKEZPTlRfU1JDX1JFR0VYLCAobWF0Y2g6IHN0cmluZykgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgY29uc3QgW3NyYywgLCBmb3JtYXRdID0gVVJMX1dJVEhfRk9STUFUX1JFR0VYLmV4ZWMobWF0Y2gpIHx8IFtdXG4gICAgICAgICAgaWYgKCFmb3JtYXQpIHtcbiAgICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChmb3JtYXQgPT09IHByZWZlcnJlZEZvbnRGb3JtYXQpIHtcbiAgICAgICAgICAgIHJldHVybiBgc3JjOiAke3NyY307YFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZEVtYmVkKHVybDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiB1cmwuc2VhcmNoKFVSTF9SRUdFWCkgIT09IC0xXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBlbWJlZFJlc291cmNlcyhcbiAgY3NzVGV4dDogc3RyaW5nLFxuICBiYXNlVXJsOiBzdHJpbmcgfCBudWxsLFxuICBvcHRpb25zOiBPcHRpb25zLFxuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgaWYgKCFzaG91bGRFbWJlZChjc3NUZXh0KSkge1xuICAgIHJldHVybiBjc3NUZXh0XG4gIH1cblxuICBjb25zdCBmaWx0ZXJlZENTU1RleHQgPSBmaWx0ZXJQcmVmZXJyZWRGb250Rm9ybWF0KGNzc1RleHQsIG9wdGlvbnMpXG4gIGNvbnN0IHVybHMgPSBwYXJzZVVSTHMoZmlsdGVyZWRDU1NUZXh0KVxuICByZXR1cm4gdXJscy5yZWR1Y2UoXG4gICAgKGRlZmVycmVkLCB1cmwpID0+XG4gICAgICBkZWZlcnJlZC50aGVuKChjc3MpID0+IGVtYmVkKGNzcywgdXJsLCBiYXNlVXJsLCBvcHRpb25zKSksXG4gICAgUHJvbWlzZS5yZXNvbHZlKGZpbHRlcmVkQ1NTVGV4dCksXG4gIClcbn1cbiIsICJpbXBvcnQgeyBPcHRpb25zIH0gZnJvbSAnLi90eXBlcydcbmltcG9ydCB7IGVtYmVkUmVzb3VyY2VzIH0gZnJvbSAnLi9lbWJlZC1yZXNvdXJjZXMnXG5pbXBvcnQgeyB0b0FycmF5LCBpc0luc3RhbmNlT2ZFbGVtZW50IH0gZnJvbSAnLi91dGlsJ1xuaW1wb3J0IHsgaXNEYXRhVXJsLCByZXNvdXJjZVRvRGF0YVVSTCB9IGZyb20gJy4vZGF0YXVybCdcbmltcG9ydCB7IGdldE1pbWVUeXBlIH0gZnJvbSAnLi9taW1lcydcblxuYXN5bmMgZnVuY3Rpb24gZW1iZWRQcm9wKFxuICBwcm9wTmFtZTogc3RyaW5nLFxuICBub2RlOiBIVE1MRWxlbWVudCxcbiAgb3B0aW9uczogT3B0aW9ucyxcbikge1xuICBjb25zdCBwcm9wVmFsdWUgPSBub2RlLnN0eWxlPy5nZXRQcm9wZXJ0eVZhbHVlKHByb3BOYW1lKVxuICBpZiAocHJvcFZhbHVlKSB7XG4gICAgY29uc3QgY3NzU3RyaW5nID0gYXdhaXQgZW1iZWRSZXNvdXJjZXMocHJvcFZhbHVlLCBudWxsLCBvcHRpb25zKVxuICAgIG5vZGUuc3R5bGUuc2V0UHJvcGVydHkoXG4gICAgICBwcm9wTmFtZSxcbiAgICAgIGNzc1N0cmluZyxcbiAgICAgIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eShwcm9wTmFtZSksXG4gICAgKVxuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGVtYmVkQmFja2dyb3VuZDxUIGV4dGVuZHMgSFRNTEVsZW1lbnQ+KFxuICBjbG9uZWROb2RlOiBULFxuICBvcHRpb25zOiBPcHRpb25zLFxuKSB7XG4gIGlmICghKGF3YWl0IGVtYmVkUHJvcCgnYmFja2dyb3VuZCcsIGNsb25lZE5vZGUsIG9wdGlvbnMpKSkge1xuICAgIGF3YWl0IGVtYmVkUHJvcCgnYmFja2dyb3VuZC1pbWFnZScsIGNsb25lZE5vZGUsIG9wdGlvbnMpXG4gIH1cbiAgaWYgKCEoYXdhaXQgZW1iZWRQcm9wKCdtYXNrJywgY2xvbmVkTm9kZSwgb3B0aW9ucykpKSB7XG4gICAgYXdhaXQgZW1iZWRQcm9wKCdtYXNrLWltYWdlJywgY2xvbmVkTm9kZSwgb3B0aW9ucylcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBlbWJlZEltYWdlTm9kZTxUIGV4dGVuZHMgSFRNTEVsZW1lbnQgfCBTVkdJbWFnZUVsZW1lbnQ+KFxuICBjbG9uZWROb2RlOiBULFxuICBvcHRpb25zOiBPcHRpb25zLFxuKSB7XG4gIGNvbnN0IGlzSW1hZ2VFbGVtZW50ID0gaXNJbnN0YW5jZU9mRWxlbWVudChjbG9uZWROb2RlLCBIVE1MSW1hZ2VFbGVtZW50KVxuXG4gIGlmIChcbiAgICAhKGlzSW1hZ2VFbGVtZW50ICYmICFpc0RhdGFVcmwoY2xvbmVkTm9kZS5zcmMpKSAmJlxuICAgICEoXG4gICAgICBpc0luc3RhbmNlT2ZFbGVtZW50KGNsb25lZE5vZGUsIFNWR0ltYWdlRWxlbWVudCkgJiZcbiAgICAgICFpc0RhdGFVcmwoY2xvbmVkTm9kZS5ocmVmLmJhc2VWYWwpXG4gICAgKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IHVybCA9IGlzSW1hZ2VFbGVtZW50ID8gY2xvbmVkTm9kZS5zcmMgOiBjbG9uZWROb2RlLmhyZWYuYmFzZVZhbFxuXG4gIGNvbnN0IGRhdGFVUkwgPSBhd2FpdCByZXNvdXJjZVRvRGF0YVVSTCh1cmwsIGdldE1pbWVUeXBlKHVybCksIG9wdGlvbnMpXG4gIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjbG9uZWROb2RlLm9ubG9hZCA9IHJlc29sdmVcbiAgICBjbG9uZWROb2RlLm9uZXJyb3IgPSByZWplY3RcblxuICAgIGNvbnN0IGltYWdlID0gY2xvbmVkTm9kZSBhcyBIVE1MSW1hZ2VFbGVtZW50XG4gICAgaWYgKGltYWdlLmRlY29kZSkge1xuICAgICAgaW1hZ2UuZGVjb2RlID0gcmVzb2x2ZSBhcyBhbnlcbiAgICB9XG5cbiAgICBpZiAoaW1hZ2UubG9hZGluZyA9PT0gJ2xhenknKSB7XG4gICAgICBpbWFnZS5sb2FkaW5nID0gJ2VhZ2VyJ1xuICAgIH1cblxuICAgIGlmIChpc0ltYWdlRWxlbWVudCkge1xuICAgICAgY2xvbmVkTm9kZS5zcmNzZXQgPSAnJ1xuICAgICAgY2xvbmVkTm9kZS5zcmMgPSBkYXRhVVJMXG4gICAgfSBlbHNlIHtcbiAgICAgIGNsb25lZE5vZGUuaHJlZi5iYXNlVmFsID0gZGF0YVVSTFxuICAgIH1cbiAgfSlcbn1cblxuYXN5bmMgZnVuY3Rpb24gZW1iZWRDaGlsZHJlbjxUIGV4dGVuZHMgSFRNTEVsZW1lbnQ+KFxuICBjbG9uZWROb2RlOiBULFxuICBvcHRpb25zOiBPcHRpb25zLFxuKSB7XG4gIGNvbnN0IGNoaWxkcmVuID0gdG9BcnJheTxIVE1MRWxlbWVudD4oY2xvbmVkTm9kZS5jaGlsZE5vZGVzKVxuICBjb25zdCBkZWZlcnJlZHMgPSBjaGlsZHJlbi5tYXAoKGNoaWxkKSA9PiBlbWJlZEltYWdlcyhjaGlsZCwgb3B0aW9ucykpXG4gIGF3YWl0IFByb21pc2UuYWxsKGRlZmVycmVkcykudGhlbigoKSA9PiBjbG9uZWROb2RlKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZW1iZWRJbWFnZXM8VCBleHRlbmRzIEhUTUxFbGVtZW50PihcbiAgY2xvbmVkTm9kZTogVCxcbiAgb3B0aW9uczogT3B0aW9ucyxcbikge1xuICBpZiAoaXNJbnN0YW5jZU9mRWxlbWVudChjbG9uZWROb2RlLCBFbGVtZW50KSkge1xuICAgIGF3YWl0IGVtYmVkQmFja2dyb3VuZChjbG9uZWROb2RlLCBvcHRpb25zKVxuICAgIGF3YWl0IGVtYmVkSW1hZ2VOb2RlKGNsb25lZE5vZGUsIG9wdGlvbnMpXG4gICAgYXdhaXQgZW1iZWRDaGlsZHJlbihjbG9uZWROb2RlLCBvcHRpb25zKVxuICB9XG59XG4iLCAiaW1wb3J0IHsgT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnXG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVN0eWxlPFQgZXh0ZW5kcyBIVE1MRWxlbWVudD4oXG4gIG5vZGU6IFQsXG4gIG9wdGlvbnM6IE9wdGlvbnMsXG4pOiBUIHtcbiAgY29uc3QgeyBzdHlsZSB9ID0gbm9kZVxuXG4gIGlmIChvcHRpb25zLmJhY2tncm91bmRDb2xvcikge1xuICAgIHN0eWxlLmJhY2tncm91bmRDb2xvciA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yXG4gIH1cblxuICBpZiAob3B0aW9ucy53aWR0aCkge1xuICAgIHN0eWxlLndpZHRoID0gYCR7b3B0aW9ucy53aWR0aH1weGBcbiAgfVxuXG4gIGlmIChvcHRpb25zLmhlaWdodCkge1xuICAgIHN0eWxlLmhlaWdodCA9IGAke29wdGlvbnMuaGVpZ2h0fXB4YFxuICB9XG5cbiAgY29uc3QgbWFudWFsID0gb3B0aW9ucy5zdHlsZVxuICBpZiAobWFudWFsICE9IG51bGwpIHtcbiAgICBPYmplY3Qua2V5cyhtYW51YWwpLmZvckVhY2goKGtleTogYW55KSA9PiB7XG4gICAgICBzdHlsZVtrZXldID0gbWFudWFsW2tleV0gYXMgc3RyaW5nXG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiBub2RlXG59XG4iLCAiaW1wb3J0IHR5cGUgeyBPcHRpb25zIH0gZnJvbSAnLi90eXBlcydcbmltcG9ydCB7IHRvQXJyYXkgfSBmcm9tICcuL3V0aWwnXG5pbXBvcnQgeyBmZXRjaEFzRGF0YVVSTCB9IGZyb20gJy4vZGF0YXVybCdcbmltcG9ydCB7IHNob3VsZEVtYmVkLCBlbWJlZFJlc291cmNlcyB9IGZyb20gJy4vZW1iZWQtcmVzb3VyY2VzJ1xuXG5pbnRlcmZhY2UgTWV0YWRhdGEge1xuICB1cmw6IHN0cmluZ1xuICBjc3NUZXh0OiBzdHJpbmdcbn1cblxuY29uc3QgY3NzRmV0Y2hDYWNoZTogeyBbaHJlZjogc3RyaW5nXTogTWV0YWRhdGEgfSA9IHt9XG5cbmFzeW5jIGZ1bmN0aW9uIGZldGNoQ1NTKHVybDogc3RyaW5nKSB7XG4gIGxldCBjYWNoZSA9IGNzc0ZldGNoQ2FjaGVbdXJsXVxuICBpZiAoY2FjaGUgIT0gbnVsbCkge1xuICAgIHJldHVybiBjYWNoZVxuICB9XG5cbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2godXJsKVxuICBjb25zdCBjc3NUZXh0ID0gYXdhaXQgcmVzLnRleHQoKVxuICBjYWNoZSA9IHsgdXJsLCBjc3NUZXh0IH1cblxuICBjc3NGZXRjaENhY2hlW3VybF0gPSBjYWNoZVxuXG4gIHJldHVybiBjYWNoZVxufVxuXG5hc3luYyBmdW5jdGlvbiBlbWJlZEZvbnRzKGRhdGE6IE1ldGFkYXRhLCBvcHRpb25zOiBPcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgbGV0IGNzc1RleHQgPSBkYXRhLmNzc1RleHRcbiAgY29uc3QgcmVnZXhVcmwgPSAvdXJsXFwoW1wiJ10/KFteXCInKV0rKVtcIiddP1xcKS9nXG4gIGNvbnN0IGZvbnRMb2NzID0gY3NzVGV4dC5tYXRjaCgvdXJsXFwoW14pXStcXCkvZykgfHwgW11cbiAgY29uc3QgbG9hZEZvbnRzID0gZm9udExvY3MubWFwKGFzeW5jIChsb2M6IHN0cmluZykgPT4ge1xuICAgIGxldCB1cmwgPSBsb2MucmVwbGFjZShyZWdleFVybCwgJyQxJylcbiAgICBpZiAoIXVybC5zdGFydHNXaXRoKCdodHRwczovLycpKSB7XG4gICAgICB1cmwgPSBuZXcgVVJMKHVybCwgZGF0YS51cmwpLmhyZWZcbiAgICB9XG5cbiAgICByZXR1cm4gZmV0Y2hBc0RhdGFVUkw8W3N0cmluZywgc3RyaW5nXT4oXG4gICAgICB1cmwsXG4gICAgICBvcHRpb25zLmZldGNoUmVxdWVzdEluaXQsXG4gICAgICAoeyByZXN1bHQgfSkgPT4ge1xuICAgICAgICBjc3NUZXh0ID0gY3NzVGV4dC5yZXBsYWNlKGxvYywgYHVybCgke3Jlc3VsdH0pYClcbiAgICAgICAgcmV0dXJuIFtsb2MsIHJlc3VsdF1cbiAgICAgIH0sXG4gICAgKVxuICB9KVxuXG4gIHJldHVybiBQcm9taXNlLmFsbChsb2FkRm9udHMpLnRoZW4oKCkgPT4gY3NzVGV4dClcbn1cblxuZnVuY3Rpb24gcGFyc2VDU1Moc291cmNlOiBzdHJpbmcpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICBjb25zdCByZXN1bHQ6IHN0cmluZ1tdID0gW11cbiAgY29uc3QgY29tbWVudHNSZWdleCA9IC8oXFwvXFwqW1xcc1xcU10qP1xcKlxcLykvZ2lcbiAgLy8gc3RyaXAgb3V0IGNvbW1lbnRzXG4gIGxldCBjc3NUZXh0ID0gc291cmNlLnJlcGxhY2UoY29tbWVudHNSZWdleCwgJycpXG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZWdleC1saXRlcmFsc1xuICBjb25zdCBrZXlmcmFtZXNSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgJygoQC4qP2tleWZyYW1lcyBbXFxcXHNcXFxcU10qPyl7KFtcXFxcc1xcXFxTXSo/fVxcXFxzKj8pfSknLFxuICAgICdnaScsXG4gIClcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IGtleWZyYW1lc1JlZ2V4LmV4ZWMoY3NzVGV4dClcbiAgICBpZiAobWF0Y2hlcyA9PT0gbnVsbCkge1xuICAgICAgYnJlYWtcbiAgICB9XG4gICAgcmVzdWx0LnB1c2gobWF0Y2hlc1swXSlcbiAgfVxuICBjc3NUZXh0ID0gY3NzVGV4dC5yZXBsYWNlKGtleWZyYW1lc1JlZ2V4LCAnJylcblxuICBjb25zdCBpbXBvcnRSZWdleCA9IC9AaW1wb3J0W1xcc1xcU10qP3VybFxcKFteKV0qXFwpW1xcc1xcU10qPzsvZ2lcbiAgLy8gdG8gbWF0Y2ggY3NzICYgbWVkaWEgcXVlcmllcyB0b2dldGhlclxuICBjb25zdCBjb21iaW5lZENTU1JlZ2V4ID1cbiAgICAnKChcXFxccyo/KD86XFxcXC9cXFxcKltcXFxcc1xcXFxTXSo/XFxcXCpcXFxcLyk/XFxcXHMqP0BtZWRpYVtcXFxcc1xcXFxTXScgK1xuICAgICcqPyl7KFtcXFxcc1xcXFxTXSo/KX1cXFxccyo/fSl8KChbXFxcXHNcXFxcU10qPyl7KFtcXFxcc1xcXFxTXSo/KX0pJ1xuICAvLyB1bmlmaWVkIHJlZ2V4XG4gIGNvbnN0IHVuaWZpZWRSZWdleCA9IG5ldyBSZWdFeHAoY29tYmluZWRDU1NSZWdleCwgJ2dpJylcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgbGV0IG1hdGNoZXMgPSBpbXBvcnRSZWdleC5leGVjKGNzc1RleHQpXG4gICAgaWYgKG1hdGNoZXMgPT09IG51bGwpIHtcbiAgICAgIG1hdGNoZXMgPSB1bmlmaWVkUmVnZXguZXhlYyhjc3NUZXh0KVxuICAgICAgaWYgKG1hdGNoZXMgPT09IG51bGwpIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGltcG9ydFJlZ2V4Lmxhc3RJbmRleCA9IHVuaWZpZWRSZWdleC5sYXN0SW5kZXhcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdW5pZmllZFJlZ2V4Lmxhc3RJbmRleCA9IGltcG9ydFJlZ2V4Lmxhc3RJbmRleFxuICAgIH1cbiAgICByZXN1bHQucHVzaChtYXRjaGVzWzBdKVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRDU1NSdWxlcyhcbiAgc3R5bGVTaGVldHM6IENTU1N0eWxlU2hlZXRbXSxcbiAgb3B0aW9uczogT3B0aW9ucyxcbik6IFByb21pc2U8Q1NTU3R5bGVSdWxlW10+IHtcbiAgY29uc3QgcmV0OiBDU1NTdHlsZVJ1bGVbXSA9IFtdXG4gIGNvbnN0IGRlZmVycmVkczogUHJvbWlzZTxudW1iZXIgfCB2b2lkPltdID0gW11cblxuICAvLyBGaXJzdCBsb29wIGlubGluZXMgaW1wb3J0c1xuICBzdHlsZVNoZWV0cy5mb3JFYWNoKChzaGVldCkgPT4ge1xuICAgIGlmICgnY3NzUnVsZXMnIGluIHNoZWV0KSB7XG4gICAgICB0cnkge1xuICAgICAgICB0b0FycmF5PENTU1J1bGU+KHNoZWV0LmNzc1J1bGVzIHx8IFtdKS5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09IENTU1J1bGUuSU1QT1JUX1JVTEUpIHtcbiAgICAgICAgICAgIGxldCBpbXBvcnRJbmRleCA9IGluZGV4ICsgMVxuICAgICAgICAgICAgY29uc3QgdXJsID0gKGl0ZW0gYXMgQ1NTSW1wb3J0UnVsZSkuaHJlZlxuICAgICAgICAgICAgY29uc3QgZGVmZXJyZWQgPSBmZXRjaENTUyh1cmwpXG4gICAgICAgICAgICAgIC50aGVuKChtZXRhZGF0YSkgPT4gZW1iZWRGb250cyhtZXRhZGF0YSwgb3B0aW9ucykpXG4gICAgICAgICAgICAgIC50aGVuKChjc3NUZXh0KSA9PlxuICAgICAgICAgICAgICAgIHBhcnNlQ1NTKGNzc1RleHQpLmZvckVhY2goKHJ1bGUpID0+IHtcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHNoZWV0Lmluc2VydFJ1bGUoXG4gICAgICAgICAgICAgICAgICAgICAgcnVsZSxcbiAgICAgICAgICAgICAgICAgICAgICBydWxlLnN0YXJ0c1dpdGgoJ0BpbXBvcnQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoaW1wb3J0SW5kZXggKz0gMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogc2hlZXQuY3NzUnVsZXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbnNlcnRpbmcgcnVsZSBmcm9tIHJlbW90ZSBjc3MnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgcnVsZSxcbiAgICAgICAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBsb2FkaW5nIHJlbW90ZSBjc3MnLCBlLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIGRlZmVycmVkcy5wdXNoKGRlZmVycmVkKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3QgaW5saW5lID1cbiAgICAgICAgICBzdHlsZVNoZWV0cy5maW5kKChhKSA9PiBhLmhyZWYgPT0gbnVsbCkgfHwgZG9jdW1lbnQuc3R5bGVTaGVldHNbMF1cbiAgICAgICAgaWYgKHNoZWV0LmhyZWYgIT0gbnVsbCkge1xuICAgICAgICAgIGRlZmVycmVkcy5wdXNoKFxuICAgICAgICAgICAgZmV0Y2hDU1Moc2hlZXQuaHJlZilcbiAgICAgICAgICAgICAgLnRoZW4oKG1ldGFkYXRhKSA9PiBlbWJlZEZvbnRzKG1ldGFkYXRhLCBvcHRpb25zKSlcbiAgICAgICAgICAgICAgLnRoZW4oKGNzc1RleHQpID0+XG4gICAgICAgICAgICAgICAgcGFyc2VDU1MoY3NzVGV4dCkuZm9yRWFjaCgocnVsZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgaW5saW5lLmluc2VydFJ1bGUocnVsZSwgc2hlZXQuY3NzUnVsZXMubGVuZ3RoKVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIC5jYXRjaCgoZXJyOiB1bmtub3duKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyByZW1vdGUgc3R5bGVzaGVldCcsIGVycilcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGlubGluaW5nIHJlbW90ZSBjc3MgZmlsZScsIGUpXG4gICAgICB9XG4gICAgfVxuICB9KVxuXG4gIHJldHVybiBQcm9taXNlLmFsbChkZWZlcnJlZHMpLnRoZW4oKCkgPT4ge1xuICAgIC8vIFNlY29uZCBsb29wIHBhcnNlcyBydWxlc1xuICAgIHN0eWxlU2hlZXRzLmZvckVhY2goKHNoZWV0KSA9PiB7XG4gICAgICBpZiAoJ2Nzc1J1bGVzJyBpbiBzaGVldCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRvQXJyYXk8Q1NTU3R5bGVSdWxlPihzaGVldC5jc3NSdWxlcyB8fCBbXSkuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgcmV0LnB1c2goaXRlbSlcbiAgICAgICAgICB9KVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3Igd2hpbGUgcmVhZGluZyBDU1MgcnVsZXMgZnJvbSAke3NoZWV0LmhyZWZ9YCwgZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gcmV0XG4gIH0pXG59XG5cbmZ1bmN0aW9uIGdldFdlYkZvbnRSdWxlcyhjc3NSdWxlczogQ1NTU3R5bGVSdWxlW10pOiBDU1NTdHlsZVJ1bGVbXSB7XG4gIHJldHVybiBjc3NSdWxlc1xuICAgIC5maWx0ZXIoKHJ1bGUpID0+IHJ1bGUudHlwZSA9PT0gQ1NTUnVsZS5GT05UX0ZBQ0VfUlVMRSlcbiAgICAuZmlsdGVyKChydWxlKSA9PiBzaG91bGRFbWJlZChydWxlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3NyYycpKSlcbn1cblxuYXN5bmMgZnVuY3Rpb24gcGFyc2VXZWJGb250UnVsZXM8VCBleHRlbmRzIEhUTUxFbGVtZW50PihcbiAgbm9kZTogVCxcbiAgb3B0aW9uczogT3B0aW9ucyxcbikge1xuICBpZiAobm9kZS5vd25lckRvY3VtZW50ID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb3ZpZGVkIGVsZW1lbnQgaXMgbm90IHdpdGhpbiBhIERvY3VtZW50JylcbiAgfVxuXG4gIGNvbnN0IHN0eWxlU2hlZXRzID0gdG9BcnJheTxDU1NTdHlsZVNoZWV0Pihub2RlLm93bmVyRG9jdW1lbnQuc3R5bGVTaGVldHMpXG4gIGNvbnN0IGNzc1J1bGVzID0gYXdhaXQgZ2V0Q1NTUnVsZXMoc3R5bGVTaGVldHMsIG9wdGlvbnMpXG5cbiAgcmV0dXJuIGdldFdlYkZvbnRSdWxlcyhjc3NSdWxlcylcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFdlYkZvbnRDU1M8VCBleHRlbmRzIEhUTUxFbGVtZW50PihcbiAgbm9kZTogVCxcbiAgb3B0aW9uczogT3B0aW9ucyxcbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IHJ1bGVzID0gYXdhaXQgcGFyc2VXZWJGb250UnVsZXMobm9kZSwgb3B0aW9ucylcbiAgY29uc3QgY3NzVGV4dHMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICBydWxlcy5tYXAoKHJ1bGUpID0+IHtcbiAgICAgIGNvbnN0IGJhc2VVcmwgPSBydWxlLnBhcmVudFN0eWxlU2hlZXQgPyBydWxlLnBhcmVudFN0eWxlU2hlZXQuaHJlZiA6IG51bGxcbiAgICAgIHJldHVybiBlbWJlZFJlc291cmNlcyhydWxlLmNzc1RleHQsIGJhc2VVcmwsIG9wdGlvbnMpXG4gICAgfSksXG4gIClcblxuICByZXR1cm4gY3NzVGV4dHMuam9pbignXFxuJylcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGVtYmVkV2ViRm9udHM8VCBleHRlbmRzIEhUTUxFbGVtZW50PihcbiAgY2xvbmVkTm9kZTogVCxcbiAgb3B0aW9uczogT3B0aW9ucyxcbikge1xuICBjb25zdCBjc3NUZXh0ID1cbiAgICBvcHRpb25zLmZvbnRFbWJlZENTUyAhPSBudWxsXG4gICAgICA/IG9wdGlvbnMuZm9udEVtYmVkQ1NTXG4gICAgICA6IG9wdGlvbnMuc2tpcEZvbnRzXG4gICAgICA/IG51bGxcbiAgICAgIDogYXdhaXQgZ2V0V2ViRm9udENTUyhjbG9uZWROb2RlLCBvcHRpb25zKVxuXG4gIGlmIChjc3NUZXh0KSB7XG4gICAgY29uc3Qgc3R5bGVOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKVxuICAgIGNvbnN0IHN5dGxlQ29udGVudCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzc1RleHQpXG5cbiAgICBzdHlsZU5vZGUuYXBwZW5kQ2hpbGQoc3l0bGVDb250ZW50KVxuXG4gICAgaWYgKGNsb25lZE5vZGUuZmlyc3RDaGlsZCkge1xuICAgICAgY2xvbmVkTm9kZS5pbnNlcnRCZWZvcmUoc3R5bGVOb2RlLCBjbG9uZWROb2RlLmZpcnN0Q2hpbGQpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNsb25lZE5vZGUuYXBwZW5kQ2hpbGQoc3R5bGVOb2RlKVxuICAgIH1cbiAgfVxufVxuIiwgImltcG9ydCB7IE9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJ1xuaW1wb3J0IHsgY2xvbmVOb2RlIH0gZnJvbSAnLi9jbG9uZS1ub2RlJ1xuaW1wb3J0IHsgZW1iZWRJbWFnZXMgfSBmcm9tICcuL2VtYmVkLWltYWdlcydcbmltcG9ydCB7IGFwcGx5U3R5bGUgfSBmcm9tICcuL2FwcGx5LXN0eWxlJ1xuaW1wb3J0IHsgZW1iZWRXZWJGb250cywgZ2V0V2ViRm9udENTUyB9IGZyb20gJy4vZW1iZWQtd2ViZm9udHMnXG5pbXBvcnQge1xuICBnZXRJbWFnZVNpemUsXG4gIGdldFBpeGVsUmF0aW8sXG4gIGNyZWF0ZUltYWdlLFxuICBjYW52YXNUb0Jsb2IsXG4gIG5vZGVUb0RhdGFVUkwsXG4gIGNoZWNrQ2FudmFzRGltZW5zaW9ucyxcbn0gZnJvbSAnLi91dGlsJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdG9Tdmc8VCBleHRlbmRzIEhUTUxFbGVtZW50PihcbiAgbm9kZTogVCxcbiAgb3B0aW9uczogT3B0aW9ucyA9IHt9LFxuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBnZXRJbWFnZVNpemUobm9kZSwgb3B0aW9ucylcbiAgY29uc3QgY2xvbmVkTm9kZSA9IChhd2FpdCBjbG9uZU5vZGUobm9kZSwgb3B0aW9ucywgdHJ1ZSkpIGFzIEhUTUxFbGVtZW50XG4gIGF3YWl0IGVtYmVkV2ViRm9udHMoY2xvbmVkTm9kZSwgb3B0aW9ucylcbiAgYXdhaXQgZW1iZWRJbWFnZXMoY2xvbmVkTm9kZSwgb3B0aW9ucylcbiAgYXBwbHlTdHlsZShjbG9uZWROb2RlLCBvcHRpb25zKVxuICBjb25zdCBkYXRhdXJpID0gYXdhaXQgbm9kZVRvRGF0YVVSTChjbG9uZWROb2RlLCB3aWR0aCwgaGVpZ2h0KVxuICByZXR1cm4gZGF0YXVyaVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdG9DYW52YXM8VCBleHRlbmRzIEhUTUxFbGVtZW50PihcbiAgbm9kZTogVCxcbiAgb3B0aW9uczogT3B0aW9ucyA9IHt9LFxuKTogUHJvbWlzZTxIVE1MQ2FudmFzRWxlbWVudD4ge1xuICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IGdldEltYWdlU2l6ZShub2RlLCBvcHRpb25zKVxuICBjb25zdCBzdmcgPSBhd2FpdCB0b1N2Zyhub2RlLCBvcHRpb25zKVxuICBjb25zdCBpbWcgPSBhd2FpdCBjcmVhdGVJbWFnZShzdmcpXG5cbiAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJylcbiAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpIVxuICBjb25zdCByYXRpbyA9IG9wdGlvbnMucGl4ZWxSYXRpbyB8fCBnZXRQaXhlbFJhdGlvKClcbiAgY29uc3QgY2FudmFzV2lkdGggPSBvcHRpb25zLmNhbnZhc1dpZHRoIHx8IHdpZHRoXG4gIGNvbnN0IGNhbnZhc0hlaWdodCA9IG9wdGlvbnMuY2FudmFzSGVpZ2h0IHx8IGhlaWdodFxuXG4gIGNhbnZhcy53aWR0aCA9IGNhbnZhc1dpZHRoICogcmF0aW9cbiAgY2FudmFzLmhlaWdodCA9IGNhbnZhc0hlaWdodCAqIHJhdGlvXG5cbiAgaWYgKCFvcHRpb25zLnNraXBBdXRvU2NhbGUpIHtcbiAgICBjaGVja0NhbnZhc0RpbWVuc2lvbnMoY2FudmFzKVxuICB9XG4gIGNhbnZhcy5zdHlsZS53aWR0aCA9IGAke2NhbnZhc1dpZHRofWBcbiAgY2FudmFzLnN0eWxlLmhlaWdodCA9IGAke2NhbnZhc0hlaWdodH1gXG5cbiAgaWYgKG9wdGlvbnMuYmFja2dyb3VuZENvbG9yKSB7XG4gICAgY29udGV4dC5maWxsU3R5bGUgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvclxuICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KVxuICB9XG5cbiAgY29udGV4dC5kcmF3SW1hZ2UoaW1nLCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpXG5cbiAgcmV0dXJuIGNhbnZhc1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdG9QaXhlbERhdGE8VCBleHRlbmRzIEhUTUxFbGVtZW50PihcbiAgbm9kZTogVCxcbiAgb3B0aW9uczogT3B0aW9ucyA9IHt9LFxuKTogUHJvbWlzZTxVaW50OENsYW1wZWRBcnJheT4ge1xuICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IGdldEltYWdlU2l6ZShub2RlLCBvcHRpb25zKVxuICBjb25zdCBjYW52YXMgPSBhd2FpdCB0b0NhbnZhcyhub2RlLCBvcHRpb25zKVxuICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKSFcbiAgcmV0dXJuIGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCkuZGF0YVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdG9Qbmc8VCBleHRlbmRzIEhUTUxFbGVtZW50PihcbiAgbm9kZTogVCxcbiAgb3B0aW9uczogT3B0aW9ucyA9IHt9LFxuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgY2FudmFzID0gYXdhaXQgdG9DYW52YXMobm9kZSwgb3B0aW9ucylcbiAgcmV0dXJuIGNhbnZhcy50b0RhdGFVUkwoKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdG9KcGVnPFQgZXh0ZW5kcyBIVE1MRWxlbWVudD4oXG4gIG5vZGU6IFQsXG4gIG9wdGlvbnM6IE9wdGlvbnMgPSB7fSxcbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IGNhbnZhcyA9IGF3YWl0IHRvQ2FudmFzKG5vZGUsIG9wdGlvbnMpXG4gIHJldHVybiBjYW52YXMudG9EYXRhVVJMKCdpbWFnZS9qcGVnJywgb3B0aW9ucy5xdWFsaXR5IHx8IDEpXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0b0Jsb2I8VCBleHRlbmRzIEhUTUxFbGVtZW50PihcbiAgbm9kZTogVCxcbiAgb3B0aW9uczogT3B0aW9ucyA9IHt9LFxuKTogUHJvbWlzZTxCbG9iIHwgbnVsbD4ge1xuICBjb25zdCBjYW52YXMgPSBhd2FpdCB0b0NhbnZhcyhub2RlLCBvcHRpb25zKVxuICBjb25zdCBibG9iID0gYXdhaXQgY2FudmFzVG9CbG9iKGNhbnZhcylcbiAgcmV0dXJuIGJsb2Jcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEZvbnRFbWJlZENTUzxUIGV4dGVuZHMgSFRNTEVsZW1lbnQ+KFxuICBub2RlOiBULFxuICBvcHRpb25zOiBPcHRpb25zID0ge30sXG4pOiBQcm9taXNlPHN0cmluZz4ge1xuICByZXR1cm4gZ2V0V2ViRm9udENTUyhub2RlLCBvcHRpb25zKVxufVxuIiwgImltcG9ydCB7IENhbnZhc05vZGUgfSBmcm9tIFwiLi9AdHlwZXMvdHlwZXNcIjtcclxuaW1wb3J0ICogYXMgSHRtbFRvSW1hZ2UgZnJvbSBcImh0bWwtdG8taW1hZ2VcIjtcclxuXHJcbi8qKlxyXG4gKiBDYXB0dXJlIGFuZCBkb3dubG9hZCBhIHNjcmVlbnNob3Qgb2YgYSBjYW52YXMgbm9kZS5cclxuICogQHBhcmFtIHtDYW52YXNOb2RlfSBub2RlIC0gVGhlIGN1cnJlbnQgbm9kZS5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIHNjcmVlbnNob3ROb2RlRWxlbWVudCAobm9kZTogQ2FudmFzTm9kZSkge1xyXG5cclxuICAgIGNvbnN0IHdvcmtzcGFjZTogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIik7XHJcbiAgICBjb25zdCBjdXJyZW50Tm9kZUVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG5vZGUubm9kZUVsLnF1ZXJ5U2VsZWN0b3IoXCIuY2FudmFzLW5vZGUtY29udGFpbmVyXCIpO1xyXG4gICAgY29uc3QgY2FudmFzQmFja2dyb3VuZENvbG9yOiBzdHJpbmcgPSB3b3Jrc3BhY2U/LmNsYXNzTGlzdC5jb250YWlucyhcInRoZW1lLWxpZ2h0XCIpID8gXCIjZmZmZmZmXCIgOiBcIiMxZTFlMWVcIjtcclxuXHJcbiAgICBpZiAoY3VycmVudE5vZGVFbGVtZW50KSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdHJ5IHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG5vZGVEYXRhVVJMOiBzdHJpbmcgPSBhd2FpdCBIdG1sVG9JbWFnZS50b1BuZyhjdXJyZW50Tm9kZUVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIENyZWF0ZSBhIHNjcmVlbnNob3QgZG93bmxvYWRlciBmcm9tIGRhdGFVUkwuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhVVJMIC0gTm9kZSBzY3JlZW5zaG90IGRhdGEgVVJMLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgY29uc3QgZG93bmxvYWRJdCA9IChkYXRhVVJMOiBzdHJpbmcpOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY29uc3QgZG93bmxvYWRlckxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcclxuICAgICAgICAgICAgICAgIGRvd25sb2FkZXJMaW5rLmRvd25sb2FkID0gXCJjYW52YXMtbm9kZS1zY3JlZW5zaG90LnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgZG93bmxvYWRlckxpbmsuaHJlZiA9IGRhdGFVUkw7XHJcbiAgICAgICAgICAgICAgICBkb3dubG9hZGVyTGluay5jbGljaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBzY3JlZW5zaG90ID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgICAgIHNjcmVlbnNob3Quc3JjID0gbm9kZURhdGFVUkw7XHJcblxyXG4gICAgICAgICAgICBzY3JlZW5zaG90Lm9ubG9hZCA9ICgpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBzY3JlZW5zaG90LndpZHRoICsgMTA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBzY3JlZW5zaG90LmhlaWdodCArIDEwO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gY2FudmFzQmFja2dyb3VuZENvbG9yO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHggPSAod2lkdGggLSBzY3JlZW5zaG90LndpZHRoKSAvIDI7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeSA9IChoZWlnaHQgLSBzY3JlZW5zaG90LmhlaWdodCkgLyAyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShzY3JlZW5zaG90LCB4LCB5KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NyZWVuc2hvdERhdGFVUkwgPSBjYW52YXMudG9EYXRhVVJMKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRJdChzY3JlZW5zaG90RGF0YVVSTCk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQ2FudmFzIENvbnRleHQgbm90IGZvdW5kICFcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY2FwdHVyaW5nIHNjcmVlbnNob3Q6IFwiLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk5vZGUgRWxlbWVudCBub3QgZm91bmQgIVwiKTtcclxuICAgIH0gIFxyXG4gICAgXHJcbn0iLCAiaW1wb3J0IHsgTWVudSB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBDYW52YXNOb2RlIH0gZnJvbSBcIi4vQHR5cGVzL3R5cGVzXCI7XHJcbmltcG9ydCBzY3JlZW5zaG90Tm9kZUVsZW1lbnQgZnJvbSBcIi4vY2FudmFzTm9kZVNjcmVlbnNob3RcIjtcclxuXHJcbi8qKlxyXG4gKiBBZGQgXCJDYXB0dXJlIG5vZGUgc2NyZWVuc2hvdFwiIG9wdGlvbiBvbiB0aGUgY3VycmVudCBub2RlIG1lbnUuXHJcbiAqIEBwYXJhbSB7TWVudX0gbWVudSAtIFdoZXJlIHdlIHdpbGwgYWRkIG9wdGlvbi5cclxuICogQHBhcmFtIHtDYW52YXNOb2RlfSBub2RlIC0gQ3VycmVudCBub2RlLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gb25TY3JlZW5zaG90T3B0aW9uIChtZW51OiBNZW51LCBub2RlOiBDYW52YXNOb2RlKSB7XHJcblxyXG4gICAgbWVudS5hZGRTZXBhcmF0b3IoKTtcclxuXHJcbiAgICBtZW51LmFkZEl0ZW0oKHRhcmdldE5vZGUpID0+IHtcclxuICAgICAgICB0YXJnZXROb2RlXHJcbiAgICAgICAgICAgIC5zZXRUaXRsZShcIkNhcHR1cmUgbm9kZSBzY3JlZW5zaG90XCIpXHJcbiAgICAgICAgICAgIC5zZXRJY29uKFwic2Npc3NvcnMtc3F1YXJlLWRhc2hlZC1ib3R0b21cIilcclxuICAgICAgICAgICAgLm9uQ2xpY2soIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgYXdhaXQgc2NyZWVuc2hvdE5vZGVFbGVtZW50KG5vZGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxufSJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBNkI7OztBQ0V2QixTQUFVLFdBQVcsS0FBYSxTQUFzQjtBQUU1RCxNQUFJLElBQUksTUFBTSxlQUFlLEdBQUc7QUFDOUIsV0FBTzs7QUFJVCxNQUFJLElBQUksTUFBTSxPQUFPLEdBQUc7QUFDdEIsV0FBTyxPQUFPLFNBQVMsV0FBVzs7QUFJcEMsTUFBSSxJQUFJLE1BQU0sV0FBVyxHQUFHO0FBQzFCLFdBQU87O0FBR1QsUUFBTSxNQUFNLFNBQVMsZUFBZSxtQkFBa0I7QUFDdEQsUUFBTSxPQUFPLElBQUksY0FBYyxNQUFNO0FBQ3JDLFFBQU0sSUFBSSxJQUFJLGNBQWMsR0FBRztBQUUvQixNQUFJLEtBQUssWUFBWSxJQUFJO0FBQ3pCLE1BQUksS0FBSyxZQUFZLENBQUM7QUFFdEIsTUFBSSxTQUFTO0FBQ1gsU0FBSyxPQUFPOztBQUdkLElBQUUsT0FBTztBQUVULFNBQU8sRUFBRTtBQUNYO0FBRU8sSUFBTSxRQUFRLE1BQUs7QUFHeEIsTUFBSSxVQUFVO0FBR2QsUUFBTSxTQUFTOztJQUViLFFBQVMsS0FBSyxPQUFNLElBQUssTUFBTSxLQUFNLEdBQUcsU0FBUyxFQUFFLElBQUksTUFBTSxFQUFFOztBQUVqRSxTQUFPLE1BQUs7QUFDVixlQUFXO0FBQ1gsV0FBTyxJQUFJLE9BQU0sSUFBSztFQUN4QjtBQUNGLEdBQUU7QUFTSSxTQUFVLFFBQVcsV0FBYztBQUN2QyxRQUFNLE1BQVcsQ0FBQTtBQUVqQixX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RztBQUNqRCx1QkFBZSxXQUFXO0FBQzFCLHVCQUFlLE9BQU87QUFDdEIsdUJBQWUsTUFBTTtBQUFBLE1BQ3pCO0FBRUEsWUFBTSxhQUFhLElBQUksTUFBTTtBQUM3QixpQkFBVyxNQUFNO0FBRWpCLGlCQUFXLFNBQVMsTUFBTTtBQUV0QixjQUFNLFNBQVMsU0FBUyxjQUFjLFFBQVE7QUFDOUMsY0FBTSxVQUFVLE9BQU8sV0FBVyxJQUFJO0FBRXRDLGNBQU0sUUFBUSxXQUFXLFFBQVE7QUFDakMsY0FBTSxTQUFTLFdBQVcsU0FBUztBQUVuQyxlQUFPLFFBQVE7QUFDZixlQUFPLFNBQVM7QUFFaEIsWUFBSSxTQUFTO0FBRVQsa0JBQVEsWUFBWTtBQUNwQixrQkFBUSxTQUFTLEdBQUcsR0FBRyxPQUFPLE1BQU07QUFFcEMsZ0JBQU0sS0FBSyxRQUFRLFdBQVcsU0FBUztBQUN2QyxnQkFBTSxLQUFLLFNBQVMsV0FBVyxVQUFVO0FBRXpDLGtCQUFRLFVBQVUsWUFBWSxHQUFHLENBQUM7QUFFbEMsZ0JBQU0sb0JBQW9CLE9BQU8sVUFBVTtBQUMzQyxxQkFBVyxpQkFBaUI7QUFBQSxRQUVoQyxPQUFPO0FBQ0gsa0JBQVEsTUFBTSw0QkFBNEI7QUFBQSxRQUM5QztBQUFBLE1BRUo7QUFBQSxJQUVKLFNBQVMsT0FBUDtBQUNFLGNBQVEsTUFBTSxnQ0FBZ0MsS0FBSztBQUFBLElBQ3ZEO0FBQUEsRUFFSixPQUFPO0FBQ0gsWUFBUSxNQUFNLDBCQUEwQjtBQUFBLEVBQzVDO0FBRUo7OztBQy9EQSxlQUFPLG1CQUEyQyxNQUFZLE1BQWtCO0FBRTVFLE9BQUssYUFBYTtBQUVsQixPQUFLLFFBQVEsQ0FBQyxlQUFlO0FBQ3pCLGVBQ0ssU0FBUyx5QkFBeUIsRUFDbEMsUUFBUSwrQkFBK0IsRUFDdkMsUUFBUyxZQUFZO0FBQ25CLFlBQU0sc0JBQXNCLElBQUk7QUFBQSxJQUNuQyxDQUFDO0FBQUEsRUFDVCxDQUFDO0FBRUw7OztBWmZBLElBQXFCLHVCQUFyQixjQUFrRCx1QkFBTztBQUFBLEVBQ3hELE1BQU0sU0FBd0I7QUFFN0IsVUFBTSxZQUFpQyxLQUFLLElBQUk7QUFFaEQsUUFBSSxDQUFDLFdBQVc7QUFDZixZQUFNLElBQUksTUFBTSxzQkFBc0I7QUFBQSxJQUN2QztBQUVBLFNBQUs7QUFBQSxNQUNKLFVBQVUsR0FBRyxvQkFBb0IsT0FBTyxNQUFZLFNBQXFCO0FBQ3hFLGNBQU0sbUJBQW1CLE1BQU0sSUFBSTtBQUFBLE1BQ3BDLENBQUM7QUFBQSxJQUNGO0FBQUEsRUFDRDtBQUNEOyIsCiAgIm5hbWVzIjogWyJwcm9jZXNzIiwgImRhdGFVUkwiLCAiY2FjaGUiXQp9Cg==
